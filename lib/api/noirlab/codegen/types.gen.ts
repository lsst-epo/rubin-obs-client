// This file is auto-generated by @hey-api/openapi-ts

export type Activity = {
  /**
   * ID of the activity, also used in URLs
   */
  id: string;
  name: string;
  /**
   * title to be displayed in the activity description when the activity is joined with other activities
   */
  title?: string | null;
  slogan?: string;
  observatory: string;
  readonly key_visual_en: string;
  readonly key_visual_es: string;
  /**
   * Format: HH:MM
   */
  duration: string;
  readonly safety_tech_doc: string;
  readonly conduct_tech_doc: string;
  readonly liability_tech_doc: string;
  readonly safety_tech_doc_es: string;
  readonly conduct_tech_doc_es: string;
  readonly liability_tech_doc_es: string;
  readonly group_safety_tech_doc: string;
  readonly group_liability_tech_doc: string;
  readonly group_safety_tech_doc_es: string;
  readonly group_liability_tech_doc_es: string;
};

export type Announcement = {
  /**
   * Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.
   */
  id: string;
  lang?: string;
  readonly url: string;
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  /**
   * Optional subtitle to be shown just above the headline.
   */
  subtitle?: string;
  description?: string;
  /**
   * Contacts
   */
  contacts?: string;
  /**
   * Links
   */
  links?: string;
  featured?: boolean;
  readonly release_date: string;
  programs: Array<Program>;
  readonly images: Array<ImageMini>;
  readonly videos: Array<VideoMini>;
};

export type AnnouncementMini = {
  /**
   * Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.
   */
  id: string;
  lang?: string;
  readonly url: string;
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  /**
   * Optional subtitle to be shown just above the headline.
   */
  subtitle?: string;
  readonly release_date: string;
  programs: Array<Program>;
  readonly main_image: ImageMini;
};

export type AuthorDescription = {
  readonly name: string;
  /**
   * Optional description, e.g.: "Author: ", or "Interview with"
   */
  description?: string;
  readonly photo: string;
  /**
   * Direct link to a JPG image, recommended size: 350px wide
   */
  readonly static_photo: string;
};

export type BlankEnum = "";

export const BlankEnum = {
  EMPTY_STRING: "",
} as const;

export type Category = {
  slug: string;
  /**
   * Title of query to be displayed to the user.
   */
  name: string;
  logo_url?: string | null;
};

export type Image = {
  /**
   * Id of image - used in the URL for the image as well as the filename for the different formats.
   */
  id: string;
  readonly url: string;
  lang?: string;
  /**
   * Id of image - used in the URL for the image as well as the filename for the different formats.
   */
  source?: string | null;
  /**
   * General descriptive title given to the image resource.
   */
  title: string;
  /**
   * Short description of the full caption.
   */
  headline?: string | null;
  /**
   * Full caption and related description text for the image resource.
   */
  description?: string | null;
  categories: Array<Category>;
  /**
   * The type of image/media resource.
   *
   * * `Observation` - Observation
   * * `Artwork` - Artwork
   * * `Photographic` - Photographic
   * * `Planetary` - Planetary
   * * `Simulation` - Simulation
   * * `Collage` - Collage
   * * `Chart` - Chart
   */
  type?: (TypeEnum | BlankEnum | NullEnum) | null;
  /**
   * The minimum information that the Publisher would like to see mentioned when the resource is used.
   */
  credit?: string;
  readonly release_date: string;
  /**
   * Width in pixels of the image resource.
   */
  width?: number | null;
  /**
   * Height in pixels of the image resource.
   */
  height?: number | null;
  featured?: boolean;
  subject_name: Array<string>;
  readonly resources: Array<{
    ResourceType?: string;
    MediaType?: string;
    URL?: string;
    FileSize?: number | null;
    Dimensions?: Array<number> | null;
    ProjectionType?: string | null;
  }>;
  readonly formats: {
    banner1920?: string | null;
    eps?: string | null;
    illustrator?: string | null;
    illustrator_text?: string | null;
    large?: string | null;
    medium?: string | null;
    news?: string | null;
    newsfeature?: string | null;
    newsmini?: string | null;
    original?: string | null;
    pdf?: string | null;
    pl_original?: string | null;
    pl_screen?: string | null;
    pl_thumbs?: string | null;
    portrait1080?: string | null;
    poster400y?: string | null;
    potwmedium?: string | null;
    publicationjpg?: string | null;
    publicationtiff?: string | null;
    publicationtiff10k?: string | null;
    publicationtiff25k?: string | null;
    publicationtiff40k?: string | null;
    screen?: string | null;
    screen640?: string | null;
    thumb150y?: string | null;
    thumb300y?: string | null;
    thumb350x?: string | null;
    thumb700x?: string | null;
    thumbs?: string | null;
    wallpaper1?: string | null;
    wallpaper2?: string | null;
    wallpaper3?: string | null;
    wallpaper4?: string | null;
    wallpaper5?: string | null;
    wallpaperthumbs?: string | null;
    zoomable?: string | null;
  };
};

export type ImageItem = ImageTiny | ImageMini;

export type ImageMini = {
  /**
   * Id of image - used in the URL for the image as well as the filename for the different formats.
   */
  id: string;
  readonly url: string;
  lang?: string;
  /**
   * Id of image - used in the URL for the image as well as the filename for the different formats.
   */
  source?: string | null;
  /**
   * General descriptive title given to the image resource.
   */
  title: string;
  /**
   * Width in pixels of the image resource.
   */
  width?: number | null;
  /**
   * Height in pixels of the image resource.
   */
  height?: number | null;
  featured?: boolean;
  categories: Array<Category>;
  readonly formats: {
    banner1920?: string | null;
    eps?: string | null;
    illustrator?: string | null;
    illustrator_text?: string | null;
    large?: string | null;
    medium?: string | null;
    news?: string | null;
    newsfeature?: string | null;
    newsmini?: string | null;
    original?: string | null;
    pdf?: string | null;
    pl_original?: string | null;
    pl_screen?: string | null;
    pl_thumbs?: string | null;
    portrait1080?: string | null;
    poster400y?: string | null;
    potwmedium?: string | null;
    publicationjpg?: string | null;
    publicationtiff?: string | null;
    publicationtiff10k?: string | null;
    publicationtiff25k?: string | null;
    publicationtiff40k?: string | null;
    screen?: string | null;
    screen640?: string | null;
    thumb150y?: string | null;
    thumb300y?: string | null;
    thumb350x?: string | null;
    thumb700x?: string | null;
    thumbs?: string | null;
    wallpaper1?: string | null;
    wallpaper2?: string | null;
    wallpaper3?: string | null;
    wallpaper4?: string | null;
    wallpaper5?: string | null;
    wallpaperthumbs?: string | null;
    zoomable?: string | null;
  };
};

export type ImageTiny = {
  /**
   * Id of image - used in the URL for the image as well as the filename for the different formats.
   */
  id: string;
  readonly url: string;
  lang?: string;
  /**
   * General descriptive title given to the image resource.
   */
  title: string;
  /**
   * Width in pixels of the image resource.
   */
  width?: number | null;
  /**
   * Height in pixels of the image resource.
   */
  height?: number | null;
  readonly formats: {
    thumb300y?: string | null;
    screen?: string | null;
    thumb700x?: string | null;
  };
};

export type Model3D = {
  /**
   * Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.
   */
  id: string;
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  description?: string;
  readonly credit: string;
  /**
   * Priority of product (100 highest, 0 lowest) - high priority products are ranked higher in search results than low priority products.
   */
  priority?: number;
  readonly release_date: string;
  readonly assets: string;
};

export type NullEnum = unknown;

export type Page = {
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  content?: string;
  /**
   * The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media
   */
  description?: string;
  /**
   * Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.
   */
  keywords?: string;
};

export type PageRequest = {
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  content?: string;
  /**
   * The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media
   */
  description?: string;
  /**
   * Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.
   */
  keywords?: string;
};

export type PaginatedAnnouncementMiniList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<AnnouncementMini>;
};

export type PaginatedImageItemList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<ImageItem>;
};

export type PaginatedImageList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<Image>;
};

export type PaginatedModel3dList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<Model3D>;
};

export type PaginatedPodcastList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<Podcast>;
};

export type PaginatedReleaseMiniList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<ReleaseMini>;
};

export type PaginatedVideoList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<Video>;
};

export type PaginatedVideoMiniList = {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Array<VideoMini>;
};

export type PatchedPageRequest = {
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title?: string;
  content?: string;
  /**
   * The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media
   */
  description?: string;
  /**
   * Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.
   */
  keywords?: string;
};

export type Podcast = {
  /**
   * Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.
   */
  id: string;
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  description?: string;
  readonly credit: string;
  /**
   * Priority of product (100 highest, 0 lowest) - high priority products are ranked higher in search results than low priority products.
   */
  priority?: number;
  readonly release_date: string;
  readonly assets: string;
};

export type Post = {
  readonly id: string;
  /**
   * Used for the URL, this cannot be updated later
   */
  slug: string;
  readonly url: string;
  title: string;
  /**
   * Optional subtitle
   */
  subtitle?: string;
  readonly banner: string;
  authors: Array<AuthorDescription>;
  readonly category: Category;
  lede: string;
  release_date?: Date | null;
};

export type Program = {
  slug: string;
  /**
   * Title of query to be displayed to the user.
   */
  name: string;
  logo_url?: string | null;
};

export type Release = {
  /**
   * Id of release - e.g. heic0801. The id must be unique.
   */
  id: string;
  lang?: string;
  readonly url: string;
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  readonly release_type: string;
  /**
   * Optional subtitle to be shown just above the headline.
   */
  subtitle?: string;
  /**
   * HTML code in lead is not allowed. The lead is further more normally shown in search engine results, making the description an effective way of capturing users attention.
   */
  headline?: string;
  readonly release_date: string;
  description?: string;
  notes?: string;
  more_information?: string;
  /**
   * Help text
   */
  links?: string;
  /**
   * Disclaimer for press release - usually e.g. retractions of previously issued press releases.
   */
  disclaimer?: string;
  programs: Array<Program>;
  readonly images: Array<ImageMini>;
  readonly videos: Array<VideoMini>;
  contacts: Array<ReleaseContact>;
};

export type ReleaseContact = {
  name?: string;
  email?: string;
  telephone?: string;
  cellular?: string;
  affiliation?: string;
  address?: string;
  city?: string;
  state_province?: string;
  postal_code?: string;
  country?: string;
};

export type ReleaseMini = {
  /**
   * Id of release - e.g. heic0801. The id must be unique.
   */
  id: string;
  lang?: string;
  readonly url: string;
  readonly release_type: string;
  /**
   * Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.
   */
  title: string;
  /**
   * Optional subtitle to be shown just above the headline.
   */
  subtitle?: string;
  /**
   * HTML code in lead is not allowed. The lead is further more normally shown in search engine results, making the description an effective way of capturing users attention.
   */
  headline?: string;
  readonly release_date: string;
  programs: Array<Program>;
  readonly main_image: ImageMini;
};

export type Showing = {
  readonly id: number;
  readonly start_time: string;
  readonly formatted_start_time: string;
  free_spaces: number;
};

/**
 * * `Observation` - Observation
 * * `Artwork` - Artwork
 * * `Photographic` - Photographic
 * * `Planetary` - Planetary
 * * `Simulation` - Simulation
 * * `Collage` - Collage
 * * `Chart` - Chart
 */
export type TypeEnum =
  | "Observation"
  | "Artwork"
  | "Photographic"
  | "Planetary"
  | "Simulation"
  | "Collage"
  | "Chart";

/**
 * * `Observation` - Observation
 * * `Artwork` - Artwork
 * * `Photographic` - Photographic
 * * `Planetary` - Planetary
 * * `Simulation` - Simulation
 * * `Collage` - Collage
 * * `Chart` - Chart
 */
export const TypeEnum = {
  OBSERVATION: "Observation",
  ARTWORK: "Artwork",
  PHOTOGRAPHIC: "Photographic",
  PLANETARY: "Planetary",
  SIMULATION: "Simulation",
  COLLAGE: "Collage",
  CHART: "Chart",
} as const;

export type Video = {
  /**
   * Id of video - used in the URL for the image as well as the filename for the different formats.
   */
  id: string;
  readonly url: string;
  lang?: string;
  /**
   * Id of video - used in the URL for the image as well as the filename for the different formats.
   */
  source?: string | null;
  /**
   * General descriptive title given to the image resource.
   */
  title: string;
  /**
   * Short description of the full caption.
   */
  headline?: string | null;
  /**
   * Full caption and related description text for the image resource.
   */
  description?: string | null;
  categories: Array<Category>;
  /**
   * The type of image/media resource.
   *
   * * `Observation` - Observation
   * * `Artwork` - Artwork
   * * `Photographic` - Photographic
   * * `Planetary` - Planetary
   * * `Simulation` - Simulation
   * * `Collage` - Collage
   * * `Chart` - Chart
   */
  type?: (TypeEnum | BlankEnum | NullEnum) | null;
  /**
   * The minimum information that the Publisher would like to see mentioned when the resource is used.
   */
  credit?: string;
  readonly release_date: string;
  featured?: boolean;
  readonly duration: string | null;
  youtube_video_id?: string | null;
  use_youtube?: boolean;
  readonly formats: {
    broadcast_sd?: string | null;
    cylindrical_16kmaster?: string | null;
    cylindrical_4kmaster?: string | null;
    cylindrical_8kmaster?: string | null;
    cylindrical_preview?: string | null;
    dome_2kmaster?: string | null;
    dome_2kplayback?: string | null;
    dome_4kmaster?: string | null;
    dome_4kplayback?: string | null;
    dome_8kmaster?: string | null;
    dome_mov?: string | null;
    dome_preview?: string | null;
    ext_highres?: string | null;
    ext_playback?: string | null;
    hd_1080_broadcast?: string | null;
    hd_1080_screen?: string | null;
    hd_1080p25_broadcast?: string | null;
    hd_1080p25_screen?: string | null;
    hd_and_apple?: string | null;
    hd_broadcast_720p25?: string | null;
    hd_broadcast_720p50?: string | null;
    large_qt?: string | null;
    medium_flash?: string | null;
    medium_mpeg1?: string | null;
    medium_podcast?: string | null;
    news?: string | null;
    newsfeature?: string | null;
    newsmini?: string | null;
    old_video?: string | null;
    original?: string | null;
    potwmedium?: string | null;
    qtvr?: string | null;
    script?: string | null;
    small_flash?: string | null;
    small_qt?: string | null;
    thumb?: string | null;
    thumb300y?: string | null;
    thumb350x?: string | null;
    ultra_hd?: string | null;
    ultra_hd_8k_broadcast?: string | null;
    ultra_hd_8k_h265?: string | null;
    ultra_hd_broadcast?: string | null;
    ultra_hd_h265?: string | null;
    videoframe?: string | null;
    vr_16kmaster?: string | null;
    vr_2k_sos?: string | null;
    vr_4k?: string | null;
    vr_4k_sos?: string | null;
    vr_4kmaster?: string | null;
    vr_8k?: string | null;
    vr_8kmaster?: string | null;
  };
};

export type VideoMini = {
  /**
   * Id of video - used in the URL for the image as well as the filename for the different formats.
   */
  id: string;
  readonly url: string;
  lang?: string;
  /**
   * Id of video - used in the URL for the image as well as the filename for the different formats.
   */
  source?: string | null;
  /**
   * General descriptive title given to the image resource.
   */
  title: string;
  featured?: boolean;
  readonly duration: string | null;
  categories: Array<Category>;
  youtube_video_id?: string | null;
  use_youtube?: boolean;
  readonly formats: {
    broadcast_sd?: string | null;
    cylindrical_16kmaster?: string | null;
    cylindrical_4kmaster?: string | null;
    cylindrical_8kmaster?: string | null;
    cylindrical_preview?: string | null;
    dome_2kmaster?: string | null;
    dome_2kplayback?: string | null;
    dome_4kmaster?: string | null;
    dome_4kplayback?: string | null;
    dome_8kmaster?: string | null;
    dome_mov?: string | null;
    dome_preview?: string | null;
    ext_highres?: string | null;
    ext_playback?: string | null;
    hd_1080_broadcast?: string | null;
    hd_1080_screen?: string | null;
    hd_1080p25_broadcast?: string | null;
    hd_1080p25_screen?: string | null;
    hd_and_apple?: string | null;
    hd_broadcast_720p25?: string | null;
    hd_broadcast_720p50?: string | null;
    large_qt?: string | null;
    medium_flash?: string | null;
    medium_mpeg1?: string | null;
    medium_podcast?: string | null;
    news?: string | null;
    newsfeature?: string | null;
    newsmini?: string | null;
    old_video?: string | null;
    original?: string | null;
    potwmedium?: string | null;
    qtvr?: string | null;
    script?: string | null;
    small_flash?: string | null;
    small_qt?: string | null;
    thumb?: string | null;
    thumb300y?: string | null;
    thumb350x?: string | null;
    ultra_hd?: string | null;
    ultra_hd_8k_broadcast?: string | null;
    ultra_hd_8k_h265?: string | null;
    ultra_hd_broadcast?: string | null;
    ultra_hd_h265?: string | null;
    videoframe?: string | null;
    vr_16kmaster?: string | null;
    vr_2k_sos?: string | null;
    vr_4k?: string | null;
    vr_4k_sos?: string | null;
    vr_4kmaster?: string | null;
    vr_8k?: string | null;
    vr_8kmaster?: string | null;
  };
};

export type AnnouncementsListData = {
  query?: {
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page. Max: 50, Default: 10
     */
    page_size?: number;
    /**
     * The program identifier, e.g: kpno, rubin, gemini, ctio, csdc, noao, useltp, noirlab
     */
    program?: string;
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type AnnouncementsListResponse = PaginatedAnnouncementMiniList;

export type AnnouncementsListError = unknown;

export type AnnouncementsRetrieveData = {
  path: {
    id: string;
  };
  query?: {
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type AnnouncementsRetrieveResponse = Announcement;

export type AnnouncementsRetrieveError = unknown;

export type MediaImagesListData = {
  query?: {
    /**
     * The web category identifier, e.g: kpno, rubin, gemini, ctio, csdc, noao, useltp, galaxies, illustrations
     */
    category?: string;
    facility?: Array<number>;
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page. Max: 50, Default: 10
     */
    page_size?: number;
    search?: string;
    /**
     * If true the response will be a simplified version of the image with only the minimal required fields. Default: false
     */
    tiny?: boolean;
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type MediaImagesListResponse = PaginatedImageItemList;

export type MediaImagesListError = unknown;

export type MediaImagesRetrieveData = {
  path: {
    id: string;
  };
  query?: {
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type MediaImagesRetrieveResponse = Image;

export type MediaImagesRetrieveError = unknown;

export type MediaVideosListData = {
  query?: {
    /**
     * The web category identifier, e.g: kpno, rubin, gemini, ctio, csdc, noao, useltp, galaxies, illustrations
     */
    category?: string;
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page. Max: 50, Default: 10
     */
    page_size?: number;
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type MediaVideosListResponse = PaginatedVideoMiniList;

export type MediaVideosListError = unknown;

export type MediaVideosRetrieveData = {
  path: {
    id: string;
  };
  query?: {
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type MediaVideosRetrieveResponse = Video;

export type MediaVideosRetrieveError = unknown;

export type ReleasesListData = {
  query?: {
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * A page number within the paginated result set.
     */
    page?: number;
    /**
     * Number of results to return per page. Max: 50, Default: 10
     */
    page_size?: number;
    /**
     * The program identifier, e.g: kpno, rubin, gemini, ctio, csdc, noao, useltp, noirlab
     */
    program?: string;
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type ReleasesListResponse = PaginatedReleaseMiniList;

export type ReleasesListError = unknown;

export type ReleasesRetrieveData = {
  path: {
    id: string;
  };
  query?: {
    /**
     * The language to use, used along with "translation_mode", default: user "preferred_language" cookie
     */
    lang?: "en" | "es";
    /**
     * Defines if the original version of an object is returned in case the translation is not found, use "fallback" to retrieve the original content if no translation exist, or "language" to return translated content only. Default: "language"
     */
    translation_mode?: "fallback" | "language";
  };
};

export type ReleasesRetrieveResponse = Release;

export type ReleasesRetrieveError = unknown;

export type VisitsActivitiesRetrieveData = {
  path: {
    id: string;
  };
};

export type VisitsActivitiesRetrieveResponse = Activity;

export type VisitsActivitiesRetrieveError = unknown;

export type VisitsShowingsListData = {
  query?: {
    /**
     * The ID of the activity to filter showings.
     */
    activity?: string;
    /**
     * The start date to filter showings from.
     */
    start_date?: Date;
  };
};

export type VisitsShowingsListResponse = Array<Showing>;

export type VisitsShowingsListError = unknown;
