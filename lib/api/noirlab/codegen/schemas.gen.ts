// This file is auto-generated by @hey-api/openapi-ts

export const ActivitySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "ID of the activity, also used in URLs",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    name: {
      type: "string",
      maxLength: 100,
    },
    title: {
      type: "string",
      nullable: true,
      description:
        "title to be displayed in the activity description when the activity is joined with other activities",
      maxLength: 100,
    },
    slogan: {
      type: "string",
      maxLength: 255,
    },
    observatory: {
      type: "string",
      maxLength: 50,
    },
    key_visual_en: {
      type: "string",
      readOnly: true,
    },
    key_visual_es: {
      type: "string",
      readOnly: true,
    },
    duration: {
      type: "string",
      description: "Format: HH:MM",
    },
    safety_tech_doc: {
      type: "string",
      readOnly: true,
    },
    conduct_tech_doc: {
      type: "string",
      readOnly: true,
    },
    liability_tech_doc: {
      type: "string",
      readOnly: true,
    },
    safety_tech_doc_es: {
      type: "string",
      readOnly: true,
    },
    conduct_tech_doc_es: {
      type: "string",
      readOnly: true,
    },
    liability_tech_doc_es: {
      type: "string",
      readOnly: true,
    },
    group_safety_tech_doc: {
      type: "string",
      readOnly: true,
    },
    group_liability_tech_doc: {
      type: "string",
      readOnly: true,
    },
    group_safety_tech_doc_es: {
      type: "string",
      readOnly: true,
    },
    group_liability_tech_doc_es: {
      type: "string",
      readOnly: true,
    },
  },
  required: [
    "conduct_tech_doc",
    "conduct_tech_doc_es",
    "duration",
    "group_liability_tech_doc",
    "group_liability_tech_doc_es",
    "group_safety_tech_doc",
    "group_safety_tech_doc_es",
    "id",
    "key_visual_en",
    "key_visual_es",
    "liability_tech_doc",
    "liability_tech_doc_es",
    "name",
    "observatory",
    "safety_tech_doc",
    "safety_tech_doc_es",
  ],
} as const;

export const AnnouncementSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    url: {
      type: "string",
      readOnly: true,
    },
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    subtitle: {
      type: "string",
      description: "Optional subtitle to be shown just above the headline.",
      maxLength: 255,
    },
    description: {
      type: "string",
    },
    contacts: {
      type: "string",
      description: "Contacts",
    },
    links: {
      type: "string",
      description: "Links",
    },
    featured: {
      type: "boolean",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    programs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Program",
      },
    },
    images: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ImageMini",
      },
      readOnly: true,
    },
    videos: {
      type: "array",
      items: {
        $ref: "#/components/schemas/VideoMini",
      },
      readOnly: true,
    },
  },
  required: [
    "id",
    "images",
    "programs",
    "release_date",
    "title",
    "url",
    "videos",
  ],
} as const;

export const AnnouncementMiniSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    url: {
      type: "string",
      readOnly: true,
    },
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    subtitle: {
      type: "string",
      description: "Optional subtitle to be shown just above the headline.",
      maxLength: 255,
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    programs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Program",
      },
    },
    main_image: {
      allOf: [
        {
          $ref: "#/components/schemas/ImageMini",
        },
      ],
      readOnly: true,
    },
  },
  required: ["id", "main_image", "programs", "release_date", "title", "url"],
} as const;

export const AuthorDescriptionSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      readOnly: true,
    },
    description: {
      type: "string",
      description:
        'Optional description, e.g.: "Author: ", or "Interview with"',
      maxLength: 100,
    },
    photo: {
      type: "string",
      readOnly: true,
    },
    static_photo: {
      type: "string",
      description: "Direct link to a JPG image, recommended size: 350px wide",
      readOnly: true,
    },
  },
  required: ["name", "photo", "static_photo"],
} as const;

export const BlankEnumSchema = {
  enum: [""],
} as const;

export const CategorySchema = {
  type: "object",
  properties: {
    slug: {
      type: "string",
    },
    name: {
      type: "string",
      description: "Title of query to be displayed to the user.",
      maxLength: 255,
    },
    logo_url: {
      type: "string",
      format: "uri",
      nullable: true,
      maxLength: 255,
    },
  },
  required: ["name", "slug"],
} as const;

export const ImageSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Id of image - used in the URL for the image as well as the filename for the different formats.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    url: {
      type: "string",
      readOnly: true,
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    source: {
      type: "string",
      description:
        "Id of image - used in the URL for the image as well as the filename for the different formats.",
      nullable: true,
      title: "Translation source",
    },
    title: {
      type: "string",
      description: "General descriptive title given to the image resource.",
      maxLength: 255,
    },
    headline: {
      type: "string",
      nullable: true,
      description: "Short description of the full caption.",
    },
    description: {
      type: "string",
      nullable: true,
      description:
        "Full caption and related description text for the image resource.",
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Category",
      },
    },
    type: {
      nullable: true,
      description: `The type of image/media resource.

* \`Observation\` - Observation
* \`Artwork\` - Artwork
* \`Photographic\` - Photographic
* \`Planetary\` - Planetary
* \`Simulation\` - Simulation
* \`Collage\` - Collage
* \`Chart\` - Chart`,
      oneOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
        {
          $ref: "#/components/schemas/BlankEnum",
        },
        {
          $ref: "#/components/schemas/NullEnum",
        },
      ],
    },
    credit: {
      type: "string",
      description:
        "The minimum information that the Publisher would like to see mentioned when the resource is used.",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    width: {
      type: "integer",
      maximum: 2147483647,
      minimum: 0,
      nullable: true,
      description: "Width in pixels of the image resource.",
    },
    height: {
      type: "integer",
      maximum: 2147483647,
      minimum: 0,
      nullable: true,
      description: "Height in pixels of the image resource.",
    },
    featured: {
      type: "boolean",
    },
    subject_name: {
      type: "array",
      items: {
        type: "string",
      },
    },
    resources: {
      type: "array",
      items: {
        type: "object",
        properties: {
          ResourceType: {
            type: "string",
          },
          MediaType: {
            type: "string",
          },
          URL: {
            type: "string",
          },
          FileSize: {
            type: "integer",
            nullable: true,
          },
          Dimensions: {
            type: "array",
            items: {
              type: "integer",
            },
            nullable: true,
          },
          ProjectionType: {
            type: "string",
            nullable: true,
          },
        },
      },
      readOnly: true,
    },
    formats: {
      type: "object",
      properties: {
        banner1920: {
          type: "string",
          nullable: true,
        },
        eps: {
          type: "string",
          nullable: true,
        },
        illustrator: {
          type: "string",
          nullable: true,
        },
        illustrator_text: {
          type: "string",
          nullable: true,
        },
        large: {
          type: "string",
          nullable: true,
        },
        medium: {
          type: "string",
          nullable: true,
        },
        news: {
          type: "string",
          nullable: true,
        },
        newsfeature: {
          type: "string",
          nullable: true,
        },
        newsmini: {
          type: "string",
          nullable: true,
        },
        original: {
          type: "string",
          nullable: true,
        },
        pdf: {
          type: "string",
          nullable: true,
        },
        pl_original: {
          type: "string",
          nullable: true,
        },
        pl_screen: {
          type: "string",
          nullable: true,
        },
        pl_thumbs: {
          type: "string",
          nullable: true,
        },
        portrait1080: {
          type: "string",
          nullable: true,
        },
        poster400y: {
          type: "string",
          nullable: true,
        },
        potwmedium: {
          type: "string",
          nullable: true,
        },
        publicationjpg: {
          type: "string",
          nullable: true,
        },
        publicationtiff: {
          type: "string",
          nullable: true,
        },
        publicationtiff10k: {
          type: "string",
          nullable: true,
        },
        publicationtiff25k: {
          type: "string",
          nullable: true,
        },
        publicationtiff40k: {
          type: "string",
          nullable: true,
        },
        screen: {
          type: "string",
          nullable: true,
        },
        screen640: {
          type: "string",
          nullable: true,
        },
        thumb150y: {
          type: "string",
          nullable: true,
        },
        thumb300y: {
          type: "string",
          nullable: true,
        },
        thumb350x: {
          type: "string",
          nullable: true,
        },
        thumb700x: {
          type: "string",
          nullable: true,
        },
        thumbs: {
          type: "string",
          nullable: true,
        },
        wallpaper1: {
          type: "string",
          nullable: true,
        },
        wallpaper2: {
          type: "string",
          nullable: true,
        },
        wallpaper3: {
          type: "string",
          nullable: true,
        },
        wallpaper4: {
          type: "string",
          nullable: true,
        },
        wallpaper5: {
          type: "string",
          nullable: true,
        },
        wallpaperthumbs: {
          type: "string",
          nullable: true,
        },
        zoomable: {
          type: "string",
          nullable: true,
        },
      },
      readOnly: true,
    },
  },
  required: [
    "categories",
    "formats",
    "id",
    "release_date",
    "resources",
    "subject_name",
    "title",
    "url",
  ],
} as const;

export const ImageItemSchema = {
  oneOf: [
    {
      $ref: "#/components/schemas/ImageTiny",
    },
    {
      $ref: "#/components/schemas/ImageMini",
    },
  ],
} as const;

export const ImageMiniSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Id of image - used in the URL for the image as well as the filename for the different formats.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    url: {
      type: "string",
      readOnly: true,
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    source: {
      type: "string",
      description:
        "Id of image - used in the URL for the image as well as the filename for the different formats.",
      nullable: true,
      title: "Translation source",
    },
    title: {
      type: "string",
      description: "General descriptive title given to the image resource.",
      maxLength: 255,
    },
    width: {
      type: "integer",
      maximum: 2147483647,
      minimum: 0,
      nullable: true,
      description: "Width in pixels of the image resource.",
    },
    height: {
      type: "integer",
      maximum: 2147483647,
      minimum: 0,
      nullable: true,
      description: "Height in pixels of the image resource.",
    },
    featured: {
      type: "boolean",
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Category",
      },
    },
    formats: {
      type: "object",
      properties: {
        banner1920: {
          type: "string",
          nullable: true,
        },
        eps: {
          type: "string",
          nullable: true,
        },
        illustrator: {
          type: "string",
          nullable: true,
        },
        illustrator_text: {
          type: "string",
          nullable: true,
        },
        large: {
          type: "string",
          nullable: true,
        },
        medium: {
          type: "string",
          nullable: true,
        },
        news: {
          type: "string",
          nullable: true,
        },
        newsfeature: {
          type: "string",
          nullable: true,
        },
        newsmini: {
          type: "string",
          nullable: true,
        },
        original: {
          type: "string",
          nullable: true,
        },
        pdf: {
          type: "string",
          nullable: true,
        },
        pl_original: {
          type: "string",
          nullable: true,
        },
        pl_screen: {
          type: "string",
          nullable: true,
        },
        pl_thumbs: {
          type: "string",
          nullable: true,
        },
        portrait1080: {
          type: "string",
          nullable: true,
        },
        poster400y: {
          type: "string",
          nullable: true,
        },
        potwmedium: {
          type: "string",
          nullable: true,
        },
        publicationjpg: {
          type: "string",
          nullable: true,
        },
        publicationtiff: {
          type: "string",
          nullable: true,
        },
        publicationtiff10k: {
          type: "string",
          nullable: true,
        },
        publicationtiff25k: {
          type: "string",
          nullable: true,
        },
        publicationtiff40k: {
          type: "string",
          nullable: true,
        },
        screen: {
          type: "string",
          nullable: true,
        },
        screen640: {
          type: "string",
          nullable: true,
        },
        thumb150y: {
          type: "string",
          nullable: true,
        },
        thumb300y: {
          type: "string",
          nullable: true,
        },
        thumb350x: {
          type: "string",
          nullable: true,
        },
        thumb700x: {
          type: "string",
          nullable: true,
        },
        thumbs: {
          type: "string",
          nullable: true,
        },
        wallpaper1: {
          type: "string",
          nullable: true,
        },
        wallpaper2: {
          type: "string",
          nullable: true,
        },
        wallpaper3: {
          type: "string",
          nullable: true,
        },
        wallpaper4: {
          type: "string",
          nullable: true,
        },
        wallpaper5: {
          type: "string",
          nullable: true,
        },
        wallpaperthumbs: {
          type: "string",
          nullable: true,
        },
        zoomable: {
          type: "string",
          nullable: true,
        },
      },
      readOnly: true,
    },
  },
  required: ["categories", "formats", "id", "title", "url"],
} as const;

export const ImageTinySchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Id of image - used in the URL for the image as well as the filename for the different formats.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    url: {
      type: "string",
      readOnly: true,
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    title: {
      type: "string",
      description: "General descriptive title given to the image resource.",
      maxLength: 255,
    },
    width: {
      type: "integer",
      maximum: 2147483647,
      minimum: 0,
      nullable: true,
      description: "Width in pixels of the image resource.",
    },
    height: {
      type: "integer",
      maximum: 2147483647,
      minimum: 0,
      nullable: true,
      description: "Height in pixels of the image resource.",
    },
    formats: {
      type: "object",
      properties: {
        thumb300y: {
          type: "string",
          nullable: true,
        },
        screen: {
          type: "string",
          nullable: true,
        },
        thumb700x: {
          type: "string",
          nullable: true,
        },
      },
      readOnly: true,
    },
  },
  required: ["formats", "id", "title", "url"],
} as const;

export const Model3dSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    description: {
      type: "string",
    },
    credit: {
      type: "string",
      readOnly: true,
    },
    priority: {
      type: "integer",
      maximum: 32767,
      minimum: 0,
      description:
        "Priority of product (100 highest, 0 lowest) - high priority products are ranked higher in search results than low priority products.",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    assets: {
      type: "string",
      readOnly: true,
    },
  },
  required: ["assets", "credit", "id", "release_date", "title"],
} as const;

export const NullEnumSchema = {
  enum: [null],
} as const;

export const PageSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    content: {
      type: "string",
    },
    description: {
      type: "string",
      description:
        "The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media",
    },
    keywords: {
      type: "string",
      description:
        "Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.",
    },
  },
  required: ["title"],
} as const;

export const PageRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      minLength: 1,
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    content: {
      type: "string",
    },
    description: {
      type: "string",
      description:
        "The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media",
    },
    keywords: {
      type: "string",
      description:
        "Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.",
    },
  },
  required: ["title"],
} as const;

export const PaginatedAnnouncementMiniListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AnnouncementMini",
      },
    },
  },
} as const;

export const PaginatedImageItemListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ImageItem",
      },
    },
  },
} as const;

export const PaginatedImageListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Image",
      },
    },
  },
} as const;

export const PaginatedModel3dListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Model3d",
      },
    },
  },
} as const;

export const PaginatedPodcastListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Podcast",
      },
    },
  },
} as const;

export const PaginatedReleaseMiniListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ReleaseMini",
      },
    },
  },
} as const;

export const PaginatedVideoListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Video",
      },
    },
  },
} as const;

export const PaginatedVideoMiniListSchema = {
  type: "object",
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=4",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?page=2",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/VideoMini",
      },
    },
  },
} as const;

export const PatchedPageRequestSchema = {
  type: "object",
  properties: {
    title: {
      type: "string",
      minLength: 1,
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    content: {
      type: "string",
    },
    description: {
      type: "string",
      description:
        "The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media",
    },
    keywords: {
      type: "string",
      description:
        "Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.",
    },
  },
} as const;

export const PodcastSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 200,
    },
    description: {
      type: "string",
    },
    credit: {
      type: "string",
      readOnly: true,
    },
    priority: {
      type: "integer",
      maximum: 32767,
      minimum: 0,
      description:
        "Priority of product (100 highest, 0 lowest) - high priority products are ranked higher in search results than low priority products.",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    assets: {
      type: "string",
      readOnly: true,
    },
  },
  required: ["assets", "credit", "id", "release_date", "title"],
} as const;

export const PostSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      readOnly: true,
    },
    slug: {
      type: "string",
      description: "Used for the URL, this cannot be updated later",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    url: {
      type: "string",
      readOnly: true,
    },
    title: {
      type: "string",
      maxLength: 255,
    },
    subtitle: {
      type: "string",
      description: "Optional subtitle",
      maxLength: 255,
    },
    banner: {
      type: "string",
      readOnly: true,
    },
    authors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/AuthorDescription",
      },
    },
    category: {
      allOf: [
        {
          $ref: "#/components/schemas/Category",
        },
      ],
      readOnly: true,
    },
    lede: {
      type: "string",
    },
    release_date: {
      type: "string",
      format: "date-time",
      nullable: true,
    },
  },
  required: [
    "authors",
    "banner",
    "category",
    "id",
    "lede",
    "slug",
    "title",
    "url",
  ],
} as const;

export const ProgramSchema = {
  type: "object",
  properties: {
    slug: {
      type: "string",
    },
    name: {
      type: "string",
      description: "Title of query to be displayed to the user.",
      maxLength: 255,
    },
    logo_url: {
      type: "string",
      format: "uri",
      nullable: true,
      maxLength: 255,
    },
  },
  required: ["name", "slug"],
} as const;

export const ReleaseSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "Id of release - e.g. heic0801. The id must be unique.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    url: {
      type: "string",
      readOnly: true,
    },
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 255,
    },
    release_type: {
      type: "string",
      readOnly: true,
    },
    subtitle: {
      type: "string",
      description: "Optional subtitle to be shown just above the headline.",
      maxLength: 255,
    },
    headline: {
      type: "string",
      description:
        "HTML code in lead is not allowed. The lead is further more normally shown in search engine results, making the description an effective way of capturing users attention.",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    description: {
      type: "string",
    },
    notes: {
      type: "string",
    },
    more_information: {
      type: "string",
    },
    links: {
      type: "string",
      description: "Help text",
    },
    disclaimer: {
      type: "string",
      description:
        "Disclaimer for press release - usually e.g. retractions of previously issued press releases.",
    },
    programs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Program",
      },
    },
    images: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ImageMini",
      },
      readOnly: true,
    },
    videos: {
      type: "array",
      items: {
        $ref: "#/components/schemas/VideoMini",
      },
      readOnly: true,
    },
    contacts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ReleaseContact",
      },
    },
  },
  required: [
    "contacts",
    "id",
    "images",
    "programs",
    "release_date",
    "release_type",
    "title",
    "url",
    "videos",
  ],
} as const;

export const ReleaseContactSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
      maxLength: 255,
    },
    email: {
      type: "string",
      maxLength: 255,
    },
    telephone: {
      type: "string",
      maxLength: 255,
    },
    cellular: {
      type: "string",
      maxLength: 255,
    },
    affiliation: {
      type: "string",
      maxLength: 255,
    },
    address: {
      type: "string",
      maxLength: 255,
    },
    city: {
      type: "string",
      maxLength: 255,
    },
    state_province: {
      type: "string",
      maxLength: 255,
    },
    postal_code: {
      type: "string",
      maxLength: 255,
    },
    country: {
      type: "string",
      maxLength: 255,
    },
  },
} as const;

export const ReleaseMiniSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description: "Id of release - e.g. heic0801. The id must be unique.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    url: {
      type: "string",
      readOnly: true,
    },
    release_type: {
      type: "string",
      readOnly: true,
    },
    title: {
      type: "string",
      description:
        "Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.",
      maxLength: 255,
    },
    subtitle: {
      type: "string",
      description: "Optional subtitle to be shown just above the headline.",
      maxLength: 255,
    },
    headline: {
      type: "string",
      description:
        "HTML code in lead is not allowed. The lead is further more normally shown in search engine results, making the description an effective way of capturing users attention.",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    programs: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Program",
      },
    },
    main_image: {
      allOf: [
        {
          $ref: "#/components/schemas/ImageMini",
        },
      ],
      readOnly: true,
    },
  },
  required: [
    "id",
    "main_image",
    "programs",
    "release_date",
    "release_type",
    "title",
    "url",
  ],
} as const;

export const ShowingSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    start_time: {
      type: "string",
      readOnly: true,
    },
    formatted_start_time: {
      type: "string",
      readOnly: true,
    },
    free_spaces: {
      type: "integer",
    },
  },
  required: ["formatted_start_time", "free_spaces", "id", "start_time"],
} as const;

export const TypeEnumSchema = {
  enum: [
    "Observation",
    "Artwork",
    "Photographic",
    "Planetary",
    "Simulation",
    "Collage",
    "Chart",
  ],
  type: "string",
  description: `* \`Observation\` - Observation
* \`Artwork\` - Artwork
* \`Photographic\` - Photographic
* \`Planetary\` - Planetary
* \`Simulation\` - Simulation
* \`Collage\` - Collage
* \`Chart\` - Chart`,
} as const;

export const VideoSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Id of video - used in the URL for the image as well as the filename for the different formats.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    url: {
      type: "string",
      readOnly: true,
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    source: {
      type: "string",
      description:
        "Id of video - used in the URL for the image as well as the filename for the different formats.",
      nullable: true,
      title: "Translation source",
    },
    title: {
      type: "string",
      description: "General descriptive title given to the image resource.",
      maxLength: 255,
    },
    headline: {
      type: "string",
      nullable: true,
      description: "Short description of the full caption.",
    },
    description: {
      type: "string",
      nullable: true,
      description:
        "Full caption and related description text for the image resource.",
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Category",
      },
    },
    type: {
      nullable: true,
      description: `The type of image/media resource.

* \`Observation\` - Observation
* \`Artwork\` - Artwork
* \`Photographic\` - Photographic
* \`Planetary\` - Planetary
* \`Simulation\` - Simulation
* \`Collage\` - Collage
* \`Chart\` - Chart`,
      oneOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
        {
          $ref: "#/components/schemas/BlankEnum",
        },
        {
          $ref: "#/components/schemas/NullEnum",
        },
      ],
    },
    credit: {
      type: "string",
      description:
        "The minimum information that the Publisher would like to see mentioned when the resource is used.",
    },
    release_date: {
      type: "string",
      readOnly: true,
    },
    featured: {
      type: "boolean",
    },
    duration: {
      type: "string",
      nullable: true,
      readOnly: true,
    },
    youtube_video_id: {
      type: "string",
      nullable: true,
      title: "YouTube VideoID",
      maxLength: 11,
    },
    use_youtube: {
      type: "boolean",
      title: "Use YouTube player",
    },
    formats: {
      type: "object",
      properties: {
        broadcast_sd: {
          type: "string",
          nullable: true,
        },
        cylindrical_16kmaster: {
          type: "string",
          nullable: true,
        },
        cylindrical_4kmaster: {
          type: "string",
          nullable: true,
        },
        cylindrical_8kmaster: {
          type: "string",
          nullable: true,
        },
        cylindrical_preview: {
          type: "string",
          nullable: true,
        },
        dome_2kmaster: {
          type: "string",
          nullable: true,
        },
        dome_2kplayback: {
          type: "string",
          nullable: true,
        },
        dome_4kmaster: {
          type: "string",
          nullable: true,
        },
        dome_4kplayback: {
          type: "string",
          nullable: true,
        },
        dome_8kmaster: {
          type: "string",
          nullable: true,
        },
        dome_mov: {
          type: "string",
          nullable: true,
        },
        dome_preview: {
          type: "string",
          nullable: true,
        },
        ext_highres: {
          type: "string",
          nullable: true,
        },
        ext_playback: {
          type: "string",
          nullable: true,
        },
        hd_1080_broadcast: {
          type: "string",
          nullable: true,
        },
        hd_1080_screen: {
          type: "string",
          nullable: true,
        },
        hd_1080p25_broadcast: {
          type: "string",
          nullable: true,
        },
        hd_1080p25_screen: {
          type: "string",
          nullable: true,
        },
        hd_and_apple: {
          type: "string",
          nullable: true,
        },
        hd_broadcast_720p25: {
          type: "string",
          nullable: true,
        },
        hd_broadcast_720p50: {
          type: "string",
          nullable: true,
        },
        large_qt: {
          type: "string",
          nullable: true,
        },
        medium_flash: {
          type: "string",
          nullable: true,
        },
        medium_mpeg1: {
          type: "string",
          nullable: true,
        },
        medium_podcast: {
          type: "string",
          nullable: true,
        },
        news: {
          type: "string",
          nullable: true,
        },
        newsfeature: {
          type: "string",
          nullable: true,
        },
        newsmini: {
          type: "string",
          nullable: true,
        },
        old_video: {
          type: "string",
          nullable: true,
        },
        original: {
          type: "string",
          nullable: true,
        },
        potwmedium: {
          type: "string",
          nullable: true,
        },
        qtvr: {
          type: "string",
          nullable: true,
        },
        script: {
          type: "string",
          nullable: true,
        },
        small_flash: {
          type: "string",
          nullable: true,
        },
        small_qt: {
          type: "string",
          nullable: true,
        },
        thumb: {
          type: "string",
          nullable: true,
        },
        thumb300y: {
          type: "string",
          nullable: true,
        },
        thumb350x: {
          type: "string",
          nullable: true,
        },
        ultra_hd: {
          type: "string",
          nullable: true,
        },
        ultra_hd_8k_broadcast: {
          type: "string",
          nullable: true,
        },
        ultra_hd_8k_h265: {
          type: "string",
          nullable: true,
        },
        ultra_hd_broadcast: {
          type: "string",
          nullable: true,
        },
        ultra_hd_h265: {
          type: "string",
          nullable: true,
        },
        videoframe: {
          type: "string",
          nullable: true,
        },
        vr_16kmaster: {
          type: "string",
          nullable: true,
        },
        vr_2k_sos: {
          type: "string",
          nullable: true,
        },
        vr_4k: {
          type: "string",
          nullable: true,
        },
        vr_4k_sos: {
          type: "string",
          nullable: true,
        },
        vr_4kmaster: {
          type: "string",
          nullable: true,
        },
        vr_8k: {
          type: "string",
          nullable: true,
        },
        vr_8kmaster: {
          type: "string",
          nullable: true,
        },
      },
      readOnly: true,
    },
  },
  required: [
    "categories",
    "duration",
    "formats",
    "id",
    "release_date",
    "title",
    "url",
  ],
} as const;

export const VideoMiniSchema = {
  type: "object",
  properties: {
    id: {
      type: "string",
      description:
        "Id of video - used in the URL for the image as well as the filename for the different formats.",
      maxLength: 50,
      pattern: "^[-a-zA-Z0-9_]+$",
    },
    url: {
      type: "string",
      readOnly: true,
    },
    lang: {
      type: "string",
      title: "Language",
      maxLength: 7,
    },
    source: {
      type: "string",
      description:
        "Id of video - used in the URL for the image as well as the filename for the different formats.",
      nullable: true,
      title: "Translation source",
    },
    title: {
      type: "string",
      description: "General descriptive title given to the image resource.",
      maxLength: 255,
    },
    featured: {
      type: "boolean",
    },
    duration: {
      type: "string",
      nullable: true,
      readOnly: true,
    },
    categories: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Category",
      },
    },
    youtube_video_id: {
      type: "string",
      nullable: true,
      title: "YouTube VideoID",
      maxLength: 11,
    },
    use_youtube: {
      type: "boolean",
      title: "Use YouTube player",
    },
    formats: {
      type: "object",
      properties: {
        broadcast_sd: {
          type: "string",
          nullable: true,
        },
        cylindrical_16kmaster: {
          type: "string",
          nullable: true,
        },
        cylindrical_4kmaster: {
          type: "string",
          nullable: true,
        },
        cylindrical_8kmaster: {
          type: "string",
          nullable: true,
        },
        cylindrical_preview: {
          type: "string",
          nullable: true,
        },
        dome_2kmaster: {
          type: "string",
          nullable: true,
        },
        dome_2kplayback: {
          type: "string",
          nullable: true,
        },
        dome_4kmaster: {
          type: "string",
          nullable: true,
        },
        dome_4kplayback: {
          type: "string",
          nullable: true,
        },
        dome_8kmaster: {
          type: "string",
          nullable: true,
        },
        dome_mov: {
          type: "string",
          nullable: true,
        },
        dome_preview: {
          type: "string",
          nullable: true,
        },
        ext_highres: {
          type: "string",
          nullable: true,
        },
        ext_playback: {
          type: "string",
          nullable: true,
        },
        hd_1080_broadcast: {
          type: "string",
          nullable: true,
        },
        hd_1080_screen: {
          type: "string",
          nullable: true,
        },
        hd_1080p25_broadcast: {
          type: "string",
          nullable: true,
        },
        hd_1080p25_screen: {
          type: "string",
          nullable: true,
        },
        hd_and_apple: {
          type: "string",
          nullable: true,
        },
        hd_broadcast_720p25: {
          type: "string",
          nullable: true,
        },
        hd_broadcast_720p50: {
          type: "string",
          nullable: true,
        },
        large_qt: {
          type: "string",
          nullable: true,
        },
        medium_flash: {
          type: "string",
          nullable: true,
        },
        medium_mpeg1: {
          type: "string",
          nullable: true,
        },
        medium_podcast: {
          type: "string",
          nullable: true,
        },
        news: {
          type: "string",
          nullable: true,
        },
        newsfeature: {
          type: "string",
          nullable: true,
        },
        newsmini: {
          type: "string",
          nullable: true,
        },
        old_video: {
          type: "string",
          nullable: true,
        },
        original: {
          type: "string",
          nullable: true,
        },
        potwmedium: {
          type: "string",
          nullable: true,
        },
        qtvr: {
          type: "string",
          nullable: true,
        },
        script: {
          type: "string",
          nullable: true,
        },
        small_flash: {
          type: "string",
          nullable: true,
        },
        small_qt: {
          type: "string",
          nullable: true,
        },
        thumb: {
          type: "string",
          nullable: true,
        },
        thumb300y: {
          type: "string",
          nullable: true,
        },
        thumb350x: {
          type: "string",
          nullable: true,
        },
        ultra_hd: {
          type: "string",
          nullable: true,
        },
        ultra_hd_8k_broadcast: {
          type: "string",
          nullable: true,
        },
        ultra_hd_8k_h265: {
          type: "string",
          nullable: true,
        },
        ultra_hd_broadcast: {
          type: "string",
          nullable: true,
        },
        ultra_hd_h265: {
          type: "string",
          nullable: true,
        },
        videoframe: {
          type: "string",
          nullable: true,
        },
        vr_16kmaster: {
          type: "string",
          nullable: true,
        },
        vr_2k_sos: {
          type: "string",
          nullable: true,
        },
        vr_4k: {
          type: "string",
          nullable: true,
        },
        vr_4k_sos: {
          type: "string",
          nullable: true,
        },
        vr_4kmaster: {
          type: "string",
          nullable: true,
        },
        vr_8k: {
          type: "string",
          nullable: true,
        },
        vr_8kmaster: {
          type: "string",
          nullable: true,
        },
      },
      readOnly: true,
    },
  },
  required: ["categories", "duration", "formats", "id", "title", "url"],
} as const;
