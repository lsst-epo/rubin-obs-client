/* eslint-disable */
import * as types from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
  "\n  query PagePreviewQuery($site: [String], $uri: [String]) {\n    entry(site: $site, uri: $uri) {\n      __typename\n      uri\n      title\n    }\n  }\n":
    types.PagePreviewQueryDocument,
  '\n    query getEntriesBySite($site: [String], $level: Int, $limit: Int) {\n      pagesEntries(site: $site, type: ["not", "redirectPage"], level: $level) {\n        ... on pages_galleryLandingPage_Entry {\n          uri\n        }\n        ... on pages_educatorPages_Entry {\n          uri\n        }\n        ... on pages_pages_Entry {\n          uri\n        }\n        ... on pages_studentPages_Entry {\n          uri\n        }\n        ... on pages_investigationLandingPage_Entry {\n          uri\n        }\n      }\n      newsEntries(limit: $limit) {\n        ... on news_post_Entry {\n          uri\n        }\n      }\n      slideshowsEntries(limit: $limit) {\n        ... on slideshows_slideshow_Entry {\n          uri\n        }\n      }\n      eventsEntries(limit: $limit) {\n        ... on events_events_Entry {\n          uri\n        }\n      }\n    }\n  ':
    types.GetEntriesBySiteDocument,
  "\n    query getEntrySectionByUri($site: [String], $uri: [String]) {\n      entry(uri: $uri, site: $site) {\n        sectionHandle\n        typeHandle\n      }\n    }\n  ":
    types.GetEntrySectionByUriDocument,
  '\n    query GalleryTitleQuery(\n      $site: [String]\n      $uri: [String]\n      $id: String\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          assetAlbum(\n            whereIn: { key: "scheme", values: $scheme }\n            where: { key: "id", value: $id }\n          ) {\n            additional {\n              TitleEN\n              TitleES\n            }\n            id\n            name\n          }\n        }\n      }\n    }\n  ':
    types.GalleryTitleQueryDocument,
  '\n    query GalleryImageQuery($site: [String], $uri: [String], $id: String) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(where: { key: "id", value: $id }) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            keyword\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  ':
    types.GalleryImageQueryDocument,
  '\n    query RandomAssetQuery($site: [String], $scheme: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          slug\n          assetAlbum(\n            random: 1\n            whereNotIn: { key: "scheme", values: $scheme }\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  ':
    types.RandomAssetQueryDocument,
  '\n    query LinkedPosts($site: [String], $id: String) {\n      newsEntries(site: $site) {\n        ... on news_post_Entry {\n          id\n          uri\n          title\n          sidebarAssets(type: "associatedAsset") {\n            ... on sidebarAssets_associatedAsset_BlockType {\n              __typename\n              asset(where: { key: "id", value: $id }) {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  ':
    types.LinkedPostsDocument,
  '\n    query GalleryForAsset($site: [String], $id: String) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          uri\n          slug\n          assetAlbum(where: { key: "id", value: $id }) {\n            id\n          }\n        }\n      }\n    }\n  ':
    types.GalleryForAssetDocument,
  '\n    query MainGalleryQuery($site: [String]) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          isVisible\n          galleryEntry {\n            ... on galleries_gallery_Entry {\n              __typename\n              slug\n            }\n          }\n          slideshowEntry {\n            ... on slideshows_slideshow_Entry {\n              __typename\n              id\n              uri\n              title\n              richTextDescription\n              images: representativeAssetVariant {\n                ... on assetVariants_Asset {\n                  __typename\n                  altText\n                  width\n                  height\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n      slideshowsMain: pagesEntries(site: $site, slug: "slideshows") {\n        ... on pages_pages_Entry {\n          __typename\n          uri\n        }\n      }\n    }\n  ':
    types.MainGalleryQueryDocument,
  "\n    query AllGalleries($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          id\n          uri\n          slug\n        }\n      }\n    }\n  ":
    types.AllGalleriesDocument,
  "\n    query AllGallerySlugs($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          slug\n        }\n      }\n    }\n  ":
    types.AllGallerySlugsDocument,
  '\n    query GalleryMetadataQuery(\n      $site: [String]\n      $slug: [String]\n      $uri: [String]\n    ) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          galleryEntry(slug: $slug) {\n            ... on galleries_gallery_Entry {\n              id\n            }\n          }\n        }\n      }\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          slug\n          title\n          description\n          cantoAssetSingle {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n          assetAlbum(first: true) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n    }\n  ':
    types.GalleryMetadataQueryDocument,
  "\n    query GalleryQuery(\n      $site: [String]\n      $uri: [String]\n      $whereIn: [WhereInFiltersInput]\n      $whereNotIn: [WhereNotInFiltersInput]\n      $whereContainsIn: [WhereContainsInFilterInput]\n      $forPage: ForPageInput\n      $sortBy: SortByInput\n      $sortByDesc: SortByDescInput\n    ) {\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          description\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            forPage: $forPage\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n            sortBy: $sortBy\n            sortByDesc: $sortByDesc\n          ) {\n            ...CantoAssetMetadata\n          }\n        }\n      }\n      metaGalleries: galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            id\n          }\n        }\n      }\n    }\n  ":
    types.GalleryQueryDocument,
  '\n    query MediaPolicyPage($site: [String]) {\n      pagesEntries(site: $site, slug: "media-policy") {\n        ... on pages_pages_Entry {\n          __typename\n          uri\n          title\n        }\n      }\n    }\n  ':
    types.MediaPolicyPageDocument,
  "\n    query getGlobalData($site: [String]) {\n      globals: globalSets(site: $site) {\n        ...rootPageInfoFragment\n        ...SiteInfoFragment\n      }\n      allCategories: categories(site: $site) {\n        ...CategoriesFragment\n      }\n    }\n  ":
    types.GetGlobalDataDocument,
  '\n    query getNavigationItems($site: [String]) {\n      navigationItems: entries(\n        section: ["pages"]\n        site: $site\n        level: 1\n        isVisible: true\n      ) {\n        id\n        title\n        uri\n        children(isVisible: true) {\n          id\n          title\n          uri\n          children(isVisible: true) {\n            id\n            title\n            uri\n          }\n        }\n      }\n      galleriesEntries(site: $site, isVisible: true) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  ':
    types.GetNavigationItemsDocument,
  '\n    query Homepage($site: [String], $uri: [String]) {\n      entry(site: $site, uri: $uri) {\n        ... on homepage_homepage_Entry {\n          title\n          id\n          description\n          pageType\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1920, height: 1067)\n            }\n          }\n          focalPointX\n          focalPointY\n          newsEntry {\n            ... on news_post_Entry {\n              id\n              date\n              title\n              teaser\n              uri\n              postType {\n                ... on newsFilters_Category {\n                  slug\n                }\n              }\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 1920, height: 1067)\n                }\n              }\n            }\n          }\n          contentBlocks {\n            ...ContentBlocks\n          }\n          customHero {\n            ... on customHero_customHero_BlockType {\n              id\n              flag\n              header\n              mixedLink {\n                customText\n                text\n                title\n                type\n                url\n                element {\n                  uri\n                }\n              }\n              teaser\n              title\n              image {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 1920, height: 1067)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ':
    types.HomepageDocument,
  '\n    query EntryMetadata($site: [String], $uri: [String]) {\n      entry(site: $site, uri: $uri) {\n        ... on homepage_homepage_Entry {\n          title\n          description\n        }\n        ... on events_events_Entry {\n          title\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on pages_pages_Entry {\n          title\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on pages_educatorPages_Entry {\n          description\n          title\n        }\n        ... on pages_studentPages_Entry {\n          description\n          title\n        }\n        ... on pages_investigationLandingPage_Entry {\n          description\n          title\n        }\n        ... on news_post_Entry {\n          postType {\n            slug\n          }\n          pressReleaseId\n          description: teaser\n          title\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on glossaryTerms_glossaryTerm_Entry {\n          title\n          cantoAssetSingle {\n            ...CantoAssetSingle\n          }\n        }\n        ... on searchResults_searchResults_Entry {\n          title\n        }\n        ... on slideshows_slideshow_Entry {\n          title\n          description: richTextDescription\n          image: representativeAssetVariant {\n            ... on assetVariants_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 600, height: 400)\n            }\n          }\n        }\n        ... on staffProfiles_staffProfiles_Entry {\n          title\n          description: pullQuote\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 600)\n            }\n          }\n        }\n      }\n    }\n  ':
    types.EntryMetadataDocument,
  '\n    query EntryBreadcrumbs($site: [String], $id: Int) {\n      entries(section: "pages", site: $site, ancestorOf: $id) {\n        id\n        title\n        uri\n      }\n    }\n  ':
    types.EntryBreadcrumbsDocument,
  "\n    query SearchResultsPage($site: [String]) {\n      searchResultsEntries(site: $site) {\n        ... on searchResults_searchResults_Entry {\n          title\n          id\n          dynamicComponent\n        }\n      }\n    }\n  ":
    types.SearchResultsPageDocument,
  "\n    query NewsSitemapData($site: [String]) {\n      newsEntries(site: $site) {\n        ... on news_post_Entry {\n          title\n          uri\n          date\n          dateUpdated\n        }\n      }\n      globalSets(site: $site) {\n        ... on siteInfo_GlobalSet {\n          siteTitle\n        }\n      }\n    }\n  ":
    types.NewsSitemapDataDocument,
  '\n    query ImageSitemapData($site: [String]) {\n      galleries: galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          uri\n          dateUpdated\n          assetAlbum(\n            whereIn: { key: "scheme", values: ["image", "video", "document"] }\n          ) {\n            id\n            scheme\n            url {\n              directUrlOriginal\n            }\n          }\n        }\n      }\n    }\n  ':
    types.ImageSitemapDataDocument,
  '\n    query SitemapData($site: [String]) {\n      pages: entries(\n        site: $site\n        section: ["pages"]\n        type: ["not", "redirectPage"]\n      ) {\n        uri\n        dateUpdated\n      }\n      homepage: homepageEntries(site: $site) {\n        ... on homepage_homepage_Entry {\n          uri\n          dateUpdated\n        }\n      }\n      staff: staffProfilesEntries(site: $site) {\n        ... on staffProfiles_staffProfiles_Entry {\n          dateUpdated\n          uri\n        }\n      }\n      slideshows: slideshowsEntries(site: $site) {\n        ... on slideshows_slideshow_Entry {\n          dateUpdated\n          uri\n        }\n      }\n      glossary: glossaryTermsEntries(site: $site) {\n        ... on glossaryTerms_glossaryTerm_Entry {\n          dateUpdated\n          uri\n        }\n      }\n    }\n  ':
    types.SitemapDataDocument,
  "fragment accordionGroupBlock on contentBlocks_accordionGroup_BlockType {\n  id\n  typeHandle\n  header\n  backgroundColor\n  accordions: children {\n    ... on contentBlocks_accordion_BlockType {\n      id\n      text\n      header\n    }\n  }\n}":
    types.AccordionGroupBlockFragmentDoc,
  'fragment ctaGridBlock on contentBlocks_ctaGrid_BlockType {\n  typeHandle\n  id\n  header\n  backgroundColor\n  fullWidth\n  mixedLink {\n    ...MixedLinkFragment\n  }\n  items: children {\n    ... on contentBlocks_cta_BlockType {\n      id\n      contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 572, height: 316)\n        }\n      }\n      mixedLink {\n        ...MixedLinkFragment\n      }\n    }\n  }\n}':
    types.CtaGridBlockFragmentDoc,
  "fragment CalloutMain on callouts_callout_Entry {\n  backgroundColor\n  dynamicComponent\n  header\n  cantoAssetSingle {\n    ...CantoAssetMetadata\n  }\n  links {\n    ...LinksFragment\n  }\n  padImage\n  order\n  ratio\n  text\n  calloutType: typeHandle\n  width\n}":
    types.CalloutMainFragmentDoc,
  'fragment calloutBlock on contentBlocks_callout_BlockType {\n  id\n  typeHandle\n  callout {\n    ...CalloutMain\n    ... on callouts_calloutTwoTone_Entry {\n      backgroundColor\n      backgroundImage: cantoAssetSingle {\n        ...CantoAssetSingle\n      }\n      captionRichText\n      header\n      image: contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 800, height: 550)\n        }\n      }\n      links {\n        ...LinksFragment\n      }\n      text\n      calloutType: typeHandle\n    }\n    ... on callouts_calloutQuote_Entry {\n      calloutType: typeHandle\n      header\n      text\n      colorScheme\n      links {\n        ...LinksFragment\n      }\n      quote\n      attribution\n      imageQuote {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 492, height: 492)\n        }\n      }\n    }\n    ... on callouts_calloutNews_Entry {\n      calloutType: typeHandle\n      backgroundColor\n      id\n      entry: newsEntry {\n        ... on news_post_Entry {\n          title\n          url\n          date\n          dateCreated\n          description: teaser\n          pressReleaseId\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          entryType: postType {\n            title\n            slug\n          }\n          postType {\n            id\n            title\n            slug\n          }\n        }\n      }\n    }\n    ... on callouts_calloutEvent_Entry {\n      calloutType: typeHandle\n      backgroundColor\n      id\n      entry: eventEntry {\n        ... on events_events_Entry {\n          title\n          url\n          startDate\n          endDate: date\n          description\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          entryType: eventType {\n            title\n            slug\n          }\n        }\n      }\n    }\n  }\n}':
    types.CalloutBlockFragmentDoc,
  "fragment complexTableBlock on contentBlocks_complexTable_BlockType {\n  id\n  typeHandle\n  plainText\n  verticalAlignment\n  sites\n  complexTable {\n    ... on complexTable_BlockType {\n      tableRow {\n        ... on tableRow_tableCell_BlockType {\n          id\n          cellWidth\n          cellBackground\n          cellContent\n          hasFlexibleCellWidth\n        }\n      }\n    }\n  }\n}":
    types.ComplexTableBlockFragmentDoc,
  "fragment contactBlock on contentBlocks_contact_BlockType {\n  id\n  typeHandle\n  header\n  linkText\n  pageEntry {\n    id\n    uri\n    title\n  }\n}":
    types.ContactBlockFragmentDoc,
  "fragment ContentBlocks on contentBlocks_NeoField {\n  ...accordionGroupBlock\n  ...calloutBlock\n  ...complexTableBlock\n  ...contactBlock\n  ...ctaGridBlock\n  ...imageGridBlock\n  ...imageBlock\n  ...investigationGridBlock\n  ...linkBlock\n  ...newsBlock\n  ...relatedContentBlock\n  ...scheduleBlock\n  ...shareBlock\n  ...simpleTableBlock\n  ...slideBlock\n  ...staffGridBlock\n  ...tableGroupBlock\n  ...textBlock\n  ...videoBlock\n  ...downloadListBlock\n  ...embedBlock\n  ...summitStatusBlock\n  ...publicationsListBlock\n  ...peopleBlock\n  ...keyNumbersBlock\n  ...skyviewerBlock\n  ...linkedImageListBlock\n  ...imageComparisonBlock\n  ...firstLookWidgetsBlock\n}":
    types.ContentBlocksFragmentDoc,
  "fragment downloadListBlock on contentBlocks_downloadList_BlockType {\n  id\n  typeHandle\n  assetsList {\n    ... on assetsList_item_BlockType {\n      id\n      typeHandle\n      linkText\n      assetSingle {\n        id\n        kind\n        filename\n        url\n        size\n      }\n    }\n  }\n}":
    types.DownloadListBlockFragmentDoc,
  "fragment embedBlock on contentBlocks_iframe_BlockType {\n  id\n  typeHandle\n  embedTitle\n  fullWidth\n  embedCode\n  embedUrl: externalUrl\n}":
    types.EmbedBlockFragmentDoc,
  "fragment firstLookWidgetsBlock on contentBlocks_firstLookWidgets_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  filmReel {\n    ... on filmReel_item_BlockType {\n      text\n      share\n    }\n  }\n  firstLookWidget\n}":
    types.FirstLookWidgetsBlockFragmentDoc,
  'fragment imageBlock on contentBlocks_image_BlockType {\n  id\n  typeHandle\n  caption\n  image: contentImage {\n    ... on contentImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "fit", width: 900)\n    }\n  }\n  cantoImage: cantoAssetSingle {\n    ...CantoAssetDetailed\n  }\n  floatDirection\n  backgroundColor\n  fullWidth\n}':
    types.ImageBlockFragmentDoc,
  "fragment imageComparisonBlock on contentBlocks_imageComparison_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  caption: captionRichText\n  images: multipleCantoAssets {\n    ...CantoAssetMetadata\n  }\n}":
    types.ImageComparisonBlockFragmentDoc,
  'fragment imageGridBlock on contentBlocks_imageGrid_BlockType {\n  typeHandle\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  items: children {\n    ... on contentBlocks_imageGridItem_BlockType {\n      id\n      header\n      contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 572, height: 316)\n        }\n      }\n    }\n  }\n}':
    types.ImageGridBlockFragmentDoc,
  "fragment investigationGridBlock on contentBlocks_investigationGrid_BlockType {\n  typeHandle\n  id\n  header\n  items: children {\n    ... on contentBlocks_investigationCta_BlockType {\n      id\n      useExternalLink\n      investigation {\n        ... on investigations_investigation_Entry {\n          id\n          uri\n          title\n          externalUrl: externalUrlTranslatable\n          status: investigationStatus\n          cantoAssetSingle {\n            ...CantoAssetSingle\n          }\n          landingPage {\n            uri\n            title\n          }\n        }\n      }\n    }\n  }\n}":
    types.InvestigationGridBlockFragmentDoc,
  "fragment keyNumbersBlock on contentBlocks_keyNumbersGrid_BlockType {\n  id\n  typeHandle\n  header\n  backgroundColor\n  fullWidth\n  keyNumbers: children {\n    ... on contentBlocks_keyNumbersGridItem_BlockType {\n      header\n      footer\n      id\n      postscript\n      subheading\n    }\n  }\n  mixedLink {\n    ...MixedLinkFragment\n  }\n}":
    types.KeyNumbersBlockFragmentDoc,
  "fragment linkBlock on contentBlocks_link_BlockType {\n  id\n  typeHandle\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n}":
    types.LinkBlockFragmentDoc,
  "fragment linkedImageListBlock on contentBlocks_linkedImageList_BlockType {\n  id\n  typeHandle\n  description\n  header\n  variant: linkedImageListVariant\n  linkedImageList {\n    ... on linkedImageList_linkedImage_BlockType {\n      id\n      image {\n        ...CantoAssetMetadata\n      }\n      link: imageLink {\n        customText\n        target\n        text\n        title\n        type\n        url\n      }\n    }\n  }\n}":
    types.LinkedImageListBlockFragmentDoc,
<<<<<<< HEAD
  'fragment newsBlock on contentBlocks_news_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  postType {\n    id\n    title\n    slug\n  }\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocks_newsItem_BlockType {\n      entry: newsEntry {\n        id\n        title\n        uri\n        ... on news_post_Entry {\n          description: teaser\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.NewsBlockFragmentDoc,
  "fragment peopleBlock on contentBlocks_peopleBlock_BlockType {\n  id\n  typeHandle\n  peopleLayout\n  people {\n    ... on people_person_Entry {\n      id\n      name: title\n      personAffiliation\n      cantoAssetSingle {\n        ...CantoAssetSingle\n      }\n    }\n  }\n}":
    types.PeopleBlockFragmentDoc,
  "fragment publicationsListBlock on contentBlocks_publicationsList_BlockType {\n  id\n  typeHandle\n  header\n  publications: publication {\n    ... on publications_publication_Entry {\n      id\n      title\n      authorPub\n      creditPub\n      date\n      externalUrl\n    }\n  }\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n}":
    types.PublicationsListBlockFragmentDoc,
  'fragment relatedContentBlock on contentBlocks_NeoField {\n  ... on contentBlocks_relatedContent_BlockType {\n    id\n    header\n    mixedLink {\n      ...MixedLinkFragment\n    }\n    backgroundColor\n    numberOfItems\n    typeHandle\n    items: children {\n      ... on contentBlocks_relatedContentItem_BlockType {\n        entry: pagePostEntry {\n          ... on pages_pages_Entry {\n            id\n            title\n            uri\n            description\n            featuredImage: cantoAssetSingle {\n              ...CantoAssetMetadata\n            }\n            hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            image: hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n          }\n          ... on news_post_Entry {\n            id\n            title\n            uri\n            pressReleaseId\n            description: teaser\n            hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            image: hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n          }\n          ... on investigations_investigation_Entry {\n            id\n            title\n            uri\n            uri\n            status: investigationStatus\n            description: investigationDescription\n            cantoAssetSingle {\n              ...CantoAssetMetadata\n            }\n            landingPage {\n              uri\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.RelatedContentBlockFragmentDoc,
  "fragment scheduleBlock on contentBlocks_schedule_BlockType {\n  id\n  typeHandle\n  date\n  description\n  scheduleRows: children {\n    ... on contentBlocks_scheduleRow_BlockType {\n      startTime\n      endTime\n      description\n      bold\n    }\n  }\n}":
    types.ScheduleBlockFragmentDoc,
  "fragment shareBlock on contentBlocks_share_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  shareTitle\n  shareVariant\n  text\n}":
=======
  '\n  fragment relatedContentBlock on contentBlocks_NeoField {\n    ... on contentBlocks_relatedContent_BlockType {\n      id\n      header\n      mixedLink {\n        ...MixedLinkFragment\n      }\n      backgroundColor\n      numberOfItems\n      typeHandle\n      items: children {\n        ... on contentBlocks_relatedContentItem_BlockType {\n          entry: pagePostEntry {\n            ... on pages_pages_Entry {\n              id\n              title\n              uri\n              description\n              featuredImage: cantoAssetSingle {\n                ...CantoAssetMetadata\n              }\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n              image: hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n            }\n            ... on news_post_Entry {\n              id\n              title\n              uri\n              pressReleaseId\n              description: teaser\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n              image: hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n            }\n            ... on investigations_investigation_Entry {\n              id\n              title\n              uri\n              uri\n              status: investigationStatus\n              description: investigationDescription\n              cantoAssetSingle {\n                ...CantoAssetMetadata\n              }\n              landingPage {\n                uri\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.RelatedContentBlockFragmentDoc,
  "\n  fragment shareBlock on contentBlocks_share_BlockType {\n    id\n    typeHandle\n    backgroundColor\n    shareTitle\n    shareVariant\n    text\n  }\n":
>>>>>>> 319bfab7 (feat: featured images)
    types.ShareBlockFragmentDoc,
  "fragment simpleTableBlock on contentBlocks_simpleTable_BlockType {\n  id\n  typeHandle\n  sites\n  simpleTable {\n    ... on simpleTable_tableRow_BlockType {\n      id\n      rowTitle\n      rowContent\n      rowColor\n    }\n  }\n}":
    types.SimpleTableBlockFragmentDoc,
  "fragment skyviewerBlock on contentBlocks_skyviewer_BlockType {\n  id\n  embedTitle\n  typeHandle\n  captionRichText\n  dec\n  fov\n  ra\n  fullWidth\n  backgroundColor\n}":
    types.SkyviewerBlockFragmentDoc,
  'fragment slideBlock on contentBlocks_slideBlock_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  numberOfItems\n  dynamicComponent\n  typeHandle\n  items: children {\n    ... on contentBlocks_slide_BlockType {\n      staffEntry {\n        id\n        title\n        uri\n        ... on staffProfiles_staffProfiles_Entry {\n          description: staffBio\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 400, height: 400)\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.SlideBlockFragmentDoc,
  'fragment staffGridBlock on contentBlocks_staffGrid_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocks_staffGridItem_BlockType {\n      entry: staffEntry {\n        ... on staffProfiles_staffProfiles_Entry {\n          id\n          title\n          plainText\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 400, height: 400)\n            }\n          }\n          uri\n        }\n      }\n    }\n  }\n}':
    types.StaffGridBlockFragmentDoc,
  "fragment summitStatusBlock on contentBlocks_summitStatus_BlockType {\n  id\n  typeHandle\n  summitStatusLayout\n}":
    types.SummitStatusBlockFragmentDoc,
  "fragment tableGroupBlock on contentBlocks_tableGroup_BlockType {\n  id\n  typeHandle\n  sites\n  items: children {\n    ...complexTableBlock\n  }\n}":
    types.TableGroupBlockFragmentDoc,
  "fragment textBlock on contentBlocks_text_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  text\n}":
    types.TextBlockFragmentDoc,
  'fragment videoBlock on contentBlocks_video_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  caption\n  url: externalUrlTranslatable\n  cantoAsset: videoType\n  fullscreenVideo\n  fullWidth\n  cantoAssets: responsiveAssets {\n    ... on responsiveAssets_asset_BlockType {\n      orientation\n      asset(where: {key: "scheme", value: "video"}) {\n        ...CantoAssetMetadata\n        default {\n          DateUploaded\n        }\n        metadata {\n          MIMEType\n        }\n      }\n    }\n  }\n}':
    types.VideoBlockFragmentDoc,
<<<<<<< HEAD
  '\n  query getEducatorPageEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on pages_educatorPages_Entry {\n        level\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        overlapHero\n        hideTitle\n        pageType\n        dynamicComponent\n        image: hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 900, height: 550)\n          }\n        }\n        ancestors {\n          ... on pages_pages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_educatorPages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_investigationLandingPage_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_redirectPage_Entry {\n            id\n            uri\n            title\n          }\n        }\n        parent {\n          id\n          uri\n          title\n          children {\n            ... on pages_pages_Entry {\n              uri\n              title\n            }\n            ... on pages_educatorPages_Entry {\n              uri\n              title\n            }\n            ... on pages_investigationLandingPage_Entry {\n              uri\n              title\n            }\n            ... on pages_redirectPage_Entry {\n              uri\n              title\n            }\n          }\n        }\n        showGuideNav: showSiblingNav\n        subHeroText\n        subHeroHeader: plainText\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n':
    types.GetEducatorPageEntryDocument,
  '\n  query getEventEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on events_events_Entry {\n        address\n        city\n        state\n        country\n        timezone\n        registrationOpenDate\n        registrationCloseDate\n        startDate\n        startTime: eventStartTime\n        endDate: date\n        endTime: eventEndTime\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        eventType {\n          id\n          title\n          slug\n        }\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n':
    types.GetEventEntryDocument,
  "fragment contactBlockNews on contentBlocksNews_contactStaff_BlockType {\n  id\n  typeHandle\n  header\n  staffEntry {\n    title\n    ... on staffProfiles_staffProfiles_Entry {\n      email\n      phoneNumber {\n        number\n      }\n      plainText\n      subLocation {\n        ... on location_Category {\n          address\n          city\n          country\n          state\n          title\n        }\n      }\n    }\n  }\n}":
    types.ContactBlockNewsFragmentDoc,
  "fragment ContentBlocksNews on contentBlocksNews_NeoField {\n  ...textBlockNews\n  ...imageBlockNews\n  ...linkBlockNews\n  ...contactBlockNews\n  ...relatedContentBlockNews\n  ...videoBlockNews\n  ...skyviewerNewsBlock\n}":
    types.ContentBlocksNewsFragmentDoc,
  'fragment imageBlockNews on contentBlocksNews_image_BlockType {\n  id\n  typeHandle\n  caption\n  image: contentImage {\n    ... on contentImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "fit", width: 900)\n    }\n  }\n  cantoImage: cantoAssetSingle {\n    ...CantoAssetDetailed\n  }\n  floatDirection\n}':
    types.ImageBlockNewsFragmentDoc,
  "fragment linkBlockNews on contentBlocksNews_linkedAsset_BlockType {\n  id\n  typeHandle\n  url: externalUrl\n  text: header\n}":
    types.LinkBlockNewsFragmentDoc,
  'fragment relatedContentBlockNews on contentBlocksNews_relatedContent_BlockType {\n  id\n  header\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocksNews_relatedContentItem_BlockType {\n      entry: pagePostEntry {\n        id\n        title\n        uri\n        ... on pages_pages_Entry {\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n        ... on news_post_Entry {\n          date\n          description: teaser\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n      }\n    }\n  }\n}':
    types.RelatedContentBlockNewsFragmentDoc,
  "fragment skyviewerNewsBlock on contentBlocksNews_skyviewer_BlockType {\n  id\n  embedTitle\n  typeHandle\n  captionRichText\n  dec\n  fov\n  ra\n  fullWidth\n  backgroundColor\n}":
    types.SkyviewerNewsBlockFragmentDoc,
  "fragment textBlockNews on contentBlocksNews_text_BlockType {\n  typeHandle\n  id\n  text\n}":
    types.TextBlockNewsFragmentDoc,
  "fragment videoBlockNews on contentBlocksNews_video_BlockType {\n  id\n  typeHandle\n  caption\n  url: externalUrlTranslatable\n}":
    types.VideoBlockNewsFragmentDoc,
  '\n  query getNewsEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on news_post_Entry {\n        date\n        dateCreated\n        dateUpdated\n        description: teaser\n        pressReleaseId\n        siteHandle\n        postType {\n          id\n          title\n          slug\n        }\n        postTags {\n          ... on newsTags_Tag {\n            slug\n            title\n          }\n        }\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        heroCaption: captionRichText\n        newsAssets: sidebarAssets {\n          ... on sidebarAssets_header_BlockType {\n            assetHeader\n          }\n          ... on sidebarAssets_textLink_BlockType {\n            text\n            textLink {\n              url\n            }\n          }\n          ... on sidebarAssets_externalLink_BlockType {\n            text\n            externalLink\n          }\n          ... on sidebarAssets_image_BlockType {\n            image {\n              ... on contentImages_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            caption\n          }\n          ... on sidebarAssets_associatedAsset_BlockType {\n            asset {\n              metadata: additional {\n                AltTextEN\n                AltTextES\n                CaptionEN\n                CaptionES\n                Credit\n                TitleEN\n                TitleES\n              }\n              id\n              width\n              height\n              url {\n                directUrlOriginal\n                directUrlPreview\n                directUrlPreviewPlay\n              }\n            }\n          }\n        }\n        contentBlocksNews {\n          ...ContentBlocksNews\n        }\n      }\n    }\n  }\n':
    types.GetNewsEntryDocument,
  '\n  fragment PagePreview on pages_pages_Entry {\n    id\n    uri\n    title\n    language\n    typeHandle\n    featuredImage: cantoAssetSingle {\n      ...CantoAssetMetadata\n    }\n    localized {\n      uri\n      language\n    }\n    date: dateUpdated\n    description\n    image: hero {\n      ... on heroes_Asset {\n        altText\n        width\n        height\n        url @transform(mode: "crop", width: 900, height: 550)\n      }\n    }\n    sidebarAssets {\n      ... on sidebarAssets_textLink_BlockType {\n        text\n        textLink {\n          url\n        }\n      }\n    }\n  }\n':
    types.PagePreviewFragmentDoc,
  '\n  query getPageEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on pages_pages_Entry {\n        level\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        overlapHero\n        hideTitle\n        pageType\n        typeHandle\n        dynamicComponent\n        eventFilter: eventType {\n          id\n        }\n        showSidebar\n        sidebarAssets {\n          ... on sidebarAssets_header_BlockType {\n            assetHeader\n          }\n          ... on sidebarAssets_textLink_BlockType {\n            text\n            textLink {\n              url\n            }\n          }\n          ... on sidebarAssets_externalLink_BlockType {\n            text\n            externalLink\n          }\n          ... on sidebarAssets_image_BlockType {\n            image {\n              ... on contentImages_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            caption\n          }\n        }\n        ancestors {\n          ... on pages_pages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_educatorPages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_investigationLandingPage_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_redirectPage_Entry {\n            id\n            uri\n            title\n          }\n        }\n        parent {\n          id\n          uri\n          title\n          children {\n            ... on pages_pages_Entry {\n              uri\n              title\n            }\n            ... on pages_educatorPages_Entry {\n              uri\n              title\n            }\n            ... on pages_investigationLandingPage_Entry {\n              uri\n              title\n            }\n            ... on pages_redirectPage_Entry {\n              uri\n              title\n            }\n          }\n        }\n        showGuideNav: showSiblingNav\n        subHeroText\n        subHeroHeader: plainText\n        subHeroColorScheme: colorScheme\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n':
    types.GetPageEntryDocument,
  '\n  query getStaffProfileEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on staffProfiles_staffProfiles_Entry {\n        bio: staffBio\n        heroImage: staffPortrait {\n          ... on staffProfiles_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        quote: pullQuote\n        tags: staffTags {\n          ... on staffTags_Tag {\n            id\n            slug\n            title\n          }\n        }\n        tradingCard: staffTradingCard {\n          ... on staffProfiles_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "fit", width: 540)\n          }\n        }\n        contentBlocks: contentBlocksNews {\n          ...ContentBlocksNews\n        }\n      }\n    }\n  }\n':
    types.GetStaffProfileEntryDocument,
  "fragment BaseFields on EntryInterface {\n  id\n  uri\n  title\n  language\n  typeHandle\n  localized {\n    uri\n    language\n  }\n}":
    types.BaseFieldsFragmentDoc,
=======
  '\n  fragment PagePreview on pages_pages_Entry {\n    id\n    uri\n    title\n    language\n    typeHandle\n    featuredImage: cantoAssetSingle {\n      ...CantoAssetMetadata\n    }\n    localized {\n      uri\n      language\n    }\n    date: dateUpdated\n    description\n    image: hero {\n      ... on heroes_Asset {\n        altText\n        width\n        height\n        url @transform(mode: "crop", width: 900, height: 550)\n      }\n    }\n    sidebarAssets {\n      ... on sidebarAssets_textLink_BlockType {\n        text\n        textLink {\n          url\n        }\n      }\n    }\n  }\n':
    types.PagePreviewFragmentDoc,
>>>>>>> 319bfab7 (feat: featured images)
  "fragment CantoAssetDetailed on CantoDamAssetInterface {\n  additional {\n    AltTextEN\n    AltTextES\n    CaptionEN\n    CaptionES\n    Credit\n    TitleEN\n    TitleES\n  }\n  default {\n    ContentType\n    DateCreated\n    DateModified\n    DateUploaded\n    Size\n  }\n  approvalStatus\n  height\n  id\n  keyword\n  name\n  owner\n  ownerName\n  scheme\n  size\n  smartTags\n  tag\n  time\n  url {\n    directUrlOriginal\n    directUrlPreview\n    directUrlPreviewPlay\n    download\n    metadata\n    preview\n    PNG\n    HighJPG\n  }\n  width\n}":
    types.CantoAssetDetailedFragmentDoc,
  "fragment CantoAssetMetadata on CantoDamAssetInterface {\n  additional {\n    AltTextEN\n    AltTextES\n    TitleEN\n    TitleES\n    CaptionEN\n    CaptionES\n    Credit\n  }\n  height\n  id\n  name\n  scheme\n  url {\n    directUrlOriginal\n    directUrlPreview\n    directUrlPreviewPlay\n  }\n  width\n}":
    types.CantoAssetMetadataFragmentDoc,
  "fragment CantoAssetSingle on CantoDamAssetInterface {\n  url {\n    directUrlPreview\n    directUrlOriginal\n    PNG\n    HighJPG\n    LowJPG\n    preview\n  }\n  width\n  height\n  metadata: additional {\n    AltTextEN\n    AltTextES\n    CaptionEN\n    CaptionES\n    Credit\n  }\n  fileInfo: metadata {\n    fileType: FileTypeExtension\n  }\n}":
    types.CantoAssetSingleFragmentDoc,
  "fragment CategoriesFragment on CategoryInterface {\n  id\n  slug\n  groupHandle\n  title\n}":
    types.CategoriesFragmentFragmentDoc,
  "fragment LinksFragment on links_link_BlockType {\n  mixedLink {\n    ... on linkField_Link {\n      customText\n      text\n      title\n      type\n      url\n      element {\n        uri\n      }\n    }\n  }\n}":
    types.LinksFragmentFragmentDoc,
  "fragment MixedLinkFragment on linkField_Link {\n  customText\n  text\n  title\n  type\n  url\n  element {\n    uri\n  }\n}":
    types.MixedLinkFragmentFragmentDoc,
  'fragment SiteInfoFragment on siteInfo_GlobalSet {\n  language\n  name\n  handle\n  siteTitle\n  siteDescription\n  siteImage {\n    ... on generalImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "crop", width: 800)\n    }\n  }\n  contactInfo {\n    ... on contactInfo_mail_BlockType {\n      id\n      text\n      typeHandle\n    }\n    ... on contactInfo_phone_BlockType {\n      id\n      text\n      typeHandle\n    }\n  }\n}':
    types.SiteInfoFragmentFragmentDoc,
  "\n    query getContactForm($set: [String], $site: [String]) {\n      contactForm: globalSet(handle: $set, site: $site) {\n        ... on contactForm_GlobalSet {\n          contactFormTopics {\n            ... on contactFormTopics_topic_BlockType {\n              id\n              value: topicValue\n              label: topicLabel\n            }\n          }\n        }\n      }\n    }\n  ":
    types.GetContactFormDocument,
  '\n    query getFooter($set: [String], $site: [String]) {\n      footer: globalSet(handle: $set, site: $site) {\n        ... on footer_GlobalSet {\n          id\n          name\n          handle\n          links {\n            ...LinksFragment\n          }\n          colophon\n          supportersLogos {\n            ... on generalImages_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "fit", width: 1000)\n            }\n          }\n          supportersLogosAlt\n        }\n      }\n    }\n  ':
    types.GetFooterDocument,
  "\n    query getLogos($set: [String], $site: [String]) {\n      siteInfo: globalSet(handle: $set, site: $site) {\n        ... on siteInfo_GlobalSet {\n          __typename\n          logoLarge {\n            url {\n              directUrlOriginal\n            }\n            width\n            height\n          }\n          logoSmall {\n            url {\n              directUrlOriginal\n            }\n            width\n            height\n          }\n        }\n      }\n    }\n  ":
    types.GetLogosDocument,
  "\n  fragment rootPageInfoFragment on rootPageInformation_GlobalSet {\n    name\n    handle\n    customBreadcrumbs {\n      ... on customBreadcrumbs_ancestorsAndRoot_BlockType {\n        header\n        pageEntry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  }\n":
    types.RootPageInfoFragmentFragmentDoc,
  "\n    query getRootPages($site: [String], $set: [String]) {\n      rootPages: globalSet(handle: $set, site: $site) {\n        ...rootPageInfoFragment\n      }\n    }\n  ":
    types.GetRootPagesDocument,
  "\n    query getSocials($set: [String], $site: [String]) {\n      socials: globalSet(handle: $set, site: $site) {\n        ... on siteInfo_GlobalSet {\n          email\n          facebook\n          instagram\n          linkedIn\n          twitter\n          youTube\n        }\n      }\n    }\n  ":
    types.GetSocialsDocument,
  '\n    query RelatedInvestigation($site: [String], $ids: [QueryArgument]) {\n      investigation: entry(\n        type: "investigation"\n        landingPage: $ids\n        site: $site\n      ) {\n        sectionHandle\n        ... on investigations_investigation_Entry {\n          uri\n          title\n          duration: plainText\n          typeHandle\n          externalUrl: externalUrlTranslatable\n          status: investigationStatus\n          landingPage {\n            ... on pages_investigationLandingPage_Entry {\n              id\n              uri\n              title\n            }\n          }\n          cantoAssetSingle {\n            ...CantoAssetMetadata\n          }\n        }\n      }\n    }\n  ':
    types.RelatedInvestigationDocument,
  '\n    query GetSiblings(\n      $uri: [String]\n      $site: [String]\n      $parentId: Int\n      $level: Int\n    ) {\n      siblings: entry(uri: $uri, site: $site) {\n        prev(\n          descendantOf: $parentId\n          section: "pages"\n          site: $site\n          level: $level\n        ) {\n          uri\n          title\n        }\n        next(\n          descendantOf: $parentId\n          section: "pages"\n          site: $site\n          level: $level\n        ) {\n          uri\n          title\n        }\n      }\n    }\n  ':
    types.GetSiblingsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query PagePreviewQuery($site: [String], $uri: [String]) {\n    entry(site: $site, uri: $uri) {\n      __typename\n      uri\n      title\n    }\n  }\n"
): (typeof documents)["\n  query PagePreviewQuery($site: [String], $uri: [String]) {\n    entry(site: $site, uri: $uri) {\n      __typename\n      uri\n      title\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query getEntriesBySite($site: [String], $level: Int, $limit: Int) {\n      pagesEntries(site: $site, type: ["not", "redirectPage"], level: $level) {\n        ... on pages_galleryLandingPage_Entry {\n          uri\n        }\n        ... on pages_educatorPages_Entry {\n          uri\n        }\n        ... on pages_pages_Entry {\n          uri\n        }\n        ... on pages_studentPages_Entry {\n          uri\n        }\n        ... on pages_investigationLandingPage_Entry {\n          uri\n        }\n      }\n      newsEntries(limit: $limit) {\n        ... on news_post_Entry {\n          uri\n        }\n      }\n      slideshowsEntries(limit: $limit) {\n        ... on slideshows_slideshow_Entry {\n          uri\n        }\n      }\n      eventsEntries(limit: $limit) {\n        ... on events_events_Entry {\n          uri\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query getEntriesBySite($site: [String], $level: Int, $limit: Int) {\n      pagesEntries(site: $site, type: ["not", "redirectPage"], level: $level) {\n        ... on pages_galleryLandingPage_Entry {\n          uri\n        }\n        ... on pages_educatorPages_Entry {\n          uri\n        }\n        ... on pages_pages_Entry {\n          uri\n        }\n        ... on pages_studentPages_Entry {\n          uri\n        }\n        ... on pages_investigationLandingPage_Entry {\n          uri\n        }\n      }\n      newsEntries(limit: $limit) {\n        ... on news_post_Entry {\n          uri\n        }\n      }\n      slideshowsEntries(limit: $limit) {\n        ... on slideshows_slideshow_Entry {\n          uri\n        }\n      }\n      eventsEntries(limit: $limit) {\n        ... on events_events_Entry {\n          uri\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getEntrySectionByUri($site: [String], $uri: [String]) {\n      entry(uri: $uri, site: $site) {\n        sectionHandle\n        typeHandle\n      }\n    }\n  "
): (typeof documents)["\n    query getEntrySectionByUri($site: [String], $uri: [String]) {\n      entry(uri: $uri, site: $site) {\n        sectionHandle\n        typeHandle\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryTitleQuery(\n      $site: [String]\n      $uri: [String]\n      $id: String\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          assetAlbum(\n            whereIn: { key: "scheme", values: $scheme }\n            where: { key: "id", value: $id }\n          ) {\n            additional {\n              TitleEN\n              TitleES\n            }\n            id\n            name\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryTitleQuery(\n      $site: [String]\n      $uri: [String]\n      $id: String\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          assetAlbum(\n            whereIn: { key: "scheme", values: $scheme }\n            where: { key: "id", value: $id }\n          ) {\n            additional {\n              TitleEN\n              TitleES\n            }\n            id\n            name\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryImageQuery($site: [String], $uri: [String], $id: String) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(where: { key: "id", value: $id }) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            keyword\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryImageQuery($site: [String], $uri: [String], $id: String) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(where: { key: "id", value: $id }) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            keyword\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query RandomAssetQuery($site: [String], $scheme: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          slug\n          assetAlbum(\n            random: 1\n            whereNotIn: { key: "scheme", values: $scheme }\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query RandomAssetQuery($site: [String], $scheme: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          slug\n          assetAlbum(\n            random: 1\n            whereNotIn: { key: "scheme", values: $scheme }\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query LinkedPosts($site: [String], $id: String) {\n      newsEntries(site: $site) {\n        ... on news_post_Entry {\n          id\n          uri\n          title\n          sidebarAssets(type: "associatedAsset") {\n            ... on sidebarAssets_associatedAsset_BlockType {\n              __typename\n              asset(where: { key: "id", value: $id }) {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query LinkedPosts($site: [String], $id: String) {\n      newsEntries(site: $site) {\n        ... on news_post_Entry {\n          id\n          uri\n          title\n          sidebarAssets(type: "associatedAsset") {\n            ... on sidebarAssets_associatedAsset_BlockType {\n              __typename\n              asset(where: { key: "id", value: $id }) {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryForAsset($site: [String], $id: String) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          uri\n          slug\n          assetAlbum(where: { key: "id", value: $id }) {\n            id\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryForAsset($site: [String], $id: String) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          uri\n          slug\n          assetAlbum(where: { key: "id", value: $id }) {\n            id\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query MainGalleryQuery($site: [String]) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          isVisible\n          galleryEntry {\n            ... on galleries_gallery_Entry {\n              __typename\n              slug\n            }\n          }\n          slideshowEntry {\n            ... on slideshows_slideshow_Entry {\n              __typename\n              id\n              uri\n              title\n              richTextDescription\n              images: representativeAssetVariant {\n                ... on assetVariants_Asset {\n                  __typename\n                  altText\n                  width\n                  height\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n      slideshowsMain: pagesEntries(site: $site, slug: "slideshows") {\n        ... on pages_pages_Entry {\n          __typename\n          uri\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query MainGalleryQuery($site: [String]) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          isVisible\n          galleryEntry {\n            ... on galleries_gallery_Entry {\n              __typename\n              slug\n            }\n          }\n          slideshowEntry {\n            ... on slideshows_slideshow_Entry {\n              __typename\n              id\n              uri\n              title\n              richTextDescription\n              images: representativeAssetVariant {\n                ... on assetVariants_Asset {\n                  __typename\n                  altText\n                  width\n                  height\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n      slideshowsMain: pagesEntries(site: $site, slug: "slideshows") {\n        ... on pages_pages_Entry {\n          __typename\n          uri\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query AllGalleries($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          id\n          uri\n          slug\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query AllGalleries($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          id\n          uri\n          slug\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query AllGallerySlugs($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          slug\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query AllGallerySlugs($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          slug\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryMetadataQuery(\n      $site: [String]\n      $slug: [String]\n      $uri: [String]\n    ) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          galleryEntry(slug: $slug) {\n            ... on galleries_gallery_Entry {\n              id\n            }\n          }\n        }\n      }\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          slug\n          title\n          description\n          cantoAssetSingle {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n          assetAlbum(first: true) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryMetadataQuery(\n      $site: [String]\n      $slug: [String]\n      $uri: [String]\n    ) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          galleryEntry(slug: $slug) {\n            ... on galleries_gallery_Entry {\n              id\n            }\n          }\n        }\n      }\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          slug\n          title\n          description\n          cantoAssetSingle {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n          assetAlbum(first: true) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query GalleryQuery(\n      $site: [String]\n      $uri: [String]\n      $whereIn: [WhereInFiltersInput]\n      $whereNotIn: [WhereNotInFiltersInput]\n      $whereContainsIn: [WhereContainsInFilterInput]\n      $forPage: ForPageInput\n      $sortBy: SortByInput\n      $sortByDesc: SortByDescInput\n    ) {\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          description\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            forPage: $forPage\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n            sortBy: $sortBy\n            sortByDesc: $sortByDesc\n          ) {\n            ...CantoAssetMetadata\n          }\n        }\n      }\n      metaGalleries: galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            id\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query GalleryQuery(\n      $site: [String]\n      $uri: [String]\n      $whereIn: [WhereInFiltersInput]\n      $whereNotIn: [WhereNotInFiltersInput]\n      $whereContainsIn: [WhereContainsInFilterInput]\n      $forPage: ForPageInput\n      $sortBy: SortByInput\n      $sortByDesc: SortByDescInput\n    ) {\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          description\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            forPage: $forPage\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n            sortBy: $sortBy\n            sortByDesc: $sortByDesc\n          ) {\n            ...CantoAssetMetadata\n          }\n        }\n      }\n      metaGalleries: galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            id\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query MediaPolicyPage($site: [String]) {\n      pagesEntries(site: $site, slug: "media-policy") {\n        ... on pages_pages_Entry {\n          __typename\n          uri\n          title\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query MediaPolicyPage($site: [String]) {\n      pagesEntries(site: $site, slug: "media-policy") {\n        ... on pages_pages_Entry {\n          __typename\n          uri\n          title\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getGlobalData($site: [String]) {\n      globals: globalSets(site: $site) {\n        ...rootPageInfoFragment\n        ...SiteInfoFragment\n      }\n      allCategories: categories(site: $site) {\n        ...CategoriesFragment\n      }\n    }\n  "
): (typeof documents)["\n    query getGlobalData($site: [String]) {\n      globals: globalSets(site: $site) {\n        ...rootPageInfoFragment\n        ...SiteInfoFragment\n      }\n      allCategories: categories(site: $site) {\n        ...CategoriesFragment\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query getNavigationItems($site: [String]) {\n      navigationItems: entries(\n        section: ["pages"]\n        site: $site\n        level: 1\n        isVisible: true\n      ) {\n        id\n        title\n        uri\n        children(isVisible: true) {\n          id\n          title\n          uri\n          children(isVisible: true) {\n            id\n            title\n            uri\n          }\n        }\n      }\n      galleriesEntries(site: $site, isVisible: true) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query getNavigationItems($site: [String]) {\n      navigationItems: entries(\n        section: ["pages"]\n        site: $site\n        level: 1\n        isVisible: true\n      ) {\n        id\n        title\n        uri\n        children(isVisible: true) {\n          id\n          title\n          uri\n          children(isVisible: true) {\n            id\n            title\n            uri\n          }\n        }\n      }\n      galleriesEntries(site: $site, isVisible: true) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query Homepage($site: [String], $uri: [String]) {\n      entry(site: $site, uri: $uri) {\n        ... on homepage_homepage_Entry {\n          title\n          id\n          description\n          pageType\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1920, height: 1067)\n            }\n          }\n          focalPointX\n          focalPointY\n          newsEntry {\n            ... on news_post_Entry {\n              id\n              date\n              title\n              teaser\n              uri\n              postType {\n                ... on newsFilters_Category {\n                  slug\n                }\n              }\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 1920, height: 1067)\n                }\n              }\n            }\n          }\n          contentBlocks {\n            ...ContentBlocks\n          }\n          customHero {\n            ... on customHero_customHero_BlockType {\n              id\n              flag\n              header\n              mixedLink {\n                customText\n                text\n                title\n                type\n                url\n                element {\n                  uri\n                }\n              }\n              teaser\n              title\n              image {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 1920, height: 1067)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query Homepage($site: [String], $uri: [String]) {\n      entry(site: $site, uri: $uri) {\n        ... on homepage_homepage_Entry {\n          title\n          id\n          description\n          pageType\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1920, height: 1067)\n            }\n          }\n          focalPointX\n          focalPointY\n          newsEntry {\n            ... on news_post_Entry {\n              id\n              date\n              title\n              teaser\n              uri\n              postType {\n                ... on newsFilters_Category {\n                  slug\n                }\n              }\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 1920, height: 1067)\n                }\n              }\n            }\n          }\n          contentBlocks {\n            ...ContentBlocks\n          }\n          customHero {\n            ... on customHero_customHero_BlockType {\n              id\n              flag\n              header\n              mixedLink {\n                customText\n                text\n                title\n                type\n                url\n                element {\n                  uri\n                }\n              }\n              teaser\n              title\n              image {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 1920, height: 1067)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query EntryMetadata($site: [String], $uri: [String]) {\n      entry(site: $site, uri: $uri) {\n        ... on homepage_homepage_Entry {\n          title\n          description\n        }\n        ... on events_events_Entry {\n          title\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on pages_pages_Entry {\n          title\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on pages_educatorPages_Entry {\n          description\n          title\n        }\n        ... on pages_studentPages_Entry {\n          description\n          title\n        }\n        ... on pages_investigationLandingPage_Entry {\n          description\n          title\n        }\n        ... on news_post_Entry {\n          postType {\n            slug\n          }\n          pressReleaseId\n          description: teaser\n          title\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on glossaryTerms_glossaryTerm_Entry {\n          title\n          cantoAssetSingle {\n            ...CantoAssetSingle\n          }\n        }\n        ... on searchResults_searchResults_Entry {\n          title\n        }\n        ... on slideshows_slideshow_Entry {\n          title\n          description: richTextDescription\n          image: representativeAssetVariant {\n            ... on assetVariants_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 600, height: 400)\n            }\n          }\n        }\n        ... on staffProfiles_staffProfiles_Entry {\n          title\n          description: pullQuote\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 600)\n            }\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query EntryMetadata($site: [String], $uri: [String]) {\n      entry(site: $site, uri: $uri) {\n        ... on homepage_homepage_Entry {\n          title\n          description\n        }\n        ... on events_events_Entry {\n          title\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on pages_pages_Entry {\n          title\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on pages_educatorPages_Entry {\n          description\n          title\n        }\n        ... on pages_studentPages_Entry {\n          description\n          title\n        }\n        ... on pages_investigationLandingPage_Entry {\n          description\n          title\n        }\n        ... on news_post_Entry {\n          postType {\n            slug\n          }\n          pressReleaseId\n          description: teaser\n          title\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 1200, height: 630)\n            }\n          }\n        }\n        ... on glossaryTerms_glossaryTerm_Entry {\n          title\n          cantoAssetSingle {\n            ...CantoAssetSingle\n          }\n        }\n        ... on searchResults_searchResults_Entry {\n          title\n        }\n        ... on slideshows_slideshow_Entry {\n          title\n          description: richTextDescription\n          image: representativeAssetVariant {\n            ... on assetVariants_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 600, height: 400)\n            }\n          }\n        }\n        ... on staffProfiles_staffProfiles_Entry {\n          title\n          description: pullQuote\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 600)\n            }\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query EntryBreadcrumbs($site: [String], $id: Int) {\n      entries(section: "pages", site: $site, ancestorOf: $id) {\n        id\n        title\n        uri\n      }\n    }\n  '
): (typeof documents)['\n    query EntryBreadcrumbs($site: [String], $id: Int) {\n      entries(section: "pages", site: $site, ancestorOf: $id) {\n        id\n        title\n        uri\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query SearchResultsPage($site: [String]) {\n      searchResultsEntries(site: $site) {\n        ... on searchResults_searchResults_Entry {\n          title\n          id\n          dynamicComponent\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query SearchResultsPage($site: [String]) {\n      searchResultsEntries(site: $site) {\n        ... on searchResults_searchResults_Entry {\n          title\n          id\n          dynamicComponent\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query NewsSitemapData($site: [String]) {\n      newsEntries(site: $site) {\n        ... on news_post_Entry {\n          title\n          uri\n          date\n          dateUpdated\n        }\n      }\n      globalSets(site: $site) {\n        ... on siteInfo_GlobalSet {\n          siteTitle\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query NewsSitemapData($site: [String]) {\n      newsEntries(site: $site) {\n        ... on news_post_Entry {\n          title\n          uri\n          date\n          dateUpdated\n        }\n      }\n      globalSets(site: $site) {\n        ... on siteInfo_GlobalSet {\n          siteTitle\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query ImageSitemapData($site: [String]) {\n      galleries: galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          uri\n          dateUpdated\n          assetAlbum(\n            whereIn: { key: "scheme", values: ["image", "video", "document"] }\n          ) {\n            id\n            scheme\n            url {\n              directUrlOriginal\n            }\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query ImageSitemapData($site: [String]) {\n      galleries: galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          uri\n          dateUpdated\n          assetAlbum(\n            whereIn: { key: "scheme", values: ["image", "video", "document"] }\n          ) {\n            id\n            scheme\n            url {\n              directUrlOriginal\n            }\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query SitemapData($site: [String]) {\n      pages: entries(\n        site: $site\n        section: ["pages"]\n        type: ["not", "redirectPage"]\n      ) {\n        uri\n        dateUpdated\n      }\n      homepage: homepageEntries(site: $site) {\n        ... on homepage_homepage_Entry {\n          uri\n          dateUpdated\n        }\n      }\n      staff: staffProfilesEntries(site: $site) {\n        ... on staffProfiles_staffProfiles_Entry {\n          dateUpdated\n          uri\n        }\n      }\n      slideshows: slideshowsEntries(site: $site) {\n        ... on slideshows_slideshow_Entry {\n          dateUpdated\n          uri\n        }\n      }\n      glossary: glossaryTermsEntries(site: $site) {\n        ... on glossaryTerms_glossaryTerm_Entry {\n          dateUpdated\n          uri\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query SitemapData($site: [String]) {\n      pages: entries(\n        site: $site\n        section: ["pages"]\n        type: ["not", "redirectPage"]\n      ) {\n        uri\n        dateUpdated\n      }\n      homepage: homepageEntries(site: $site) {\n        ... on homepage_homepage_Entry {\n          uri\n          dateUpdated\n        }\n      }\n      staff: staffProfilesEntries(site: $site) {\n        ... on staffProfiles_staffProfiles_Entry {\n          dateUpdated\n          uri\n        }\n      }\n      slideshows: slideshowsEntries(site: $site) {\n        ... on slideshows_slideshow_Entry {\n          dateUpdated\n          uri\n        }\n      }\n      glossary: glossaryTermsEntries(site: $site) {\n        ... on glossaryTerms_glossaryTerm_Entry {\n          dateUpdated\n          uri\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment accordionGroupBlock on contentBlocks_accordionGroup_BlockType {\n  id\n  typeHandle\n  header\n  backgroundColor\n  accordions: children {\n    ... on contentBlocks_accordion_BlockType {\n      id\n      text\n      header\n    }\n  }\n}"
): (typeof documents)["fragment accordionGroupBlock on contentBlocks_accordionGroup_BlockType {\n  id\n  typeHandle\n  header\n  backgroundColor\n  accordions: children {\n    ... on contentBlocks_accordion_BlockType {\n      id\n      text\n      header\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment ctaGridBlock on contentBlocks_ctaGrid_BlockType {\n  typeHandle\n  id\n  header\n  backgroundColor\n  fullWidth\n  mixedLink {\n    ...MixedLinkFragment\n  }\n  items: children {\n    ... on contentBlocks_cta_BlockType {\n      id\n      contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 572, height: 316)\n        }\n      }\n      mixedLink {\n        ...MixedLinkFragment\n      }\n    }\n  }\n}'
): (typeof documents)['fragment ctaGridBlock on contentBlocks_ctaGrid_BlockType {\n  typeHandle\n  id\n  header\n  backgroundColor\n  fullWidth\n  mixedLink {\n    ...MixedLinkFragment\n  }\n  items: children {\n    ... on contentBlocks_cta_BlockType {\n      id\n      contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 572, height: 316)\n        }\n      }\n      mixedLink {\n        ...MixedLinkFragment\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment CalloutMain on callouts_callout_Entry {\n  backgroundColor\n  dynamicComponent\n  header\n  cantoAssetSingle {\n    ...CantoAssetMetadata\n  }\n  links {\n    ...LinksFragment\n  }\n  padImage\n  order\n  ratio\n  text\n  calloutType: typeHandle\n  width\n}"
): (typeof documents)["fragment CalloutMain on callouts_callout_Entry {\n  backgroundColor\n  dynamicComponent\n  header\n  cantoAssetSingle {\n    ...CantoAssetMetadata\n  }\n  links {\n    ...LinksFragment\n  }\n  padImage\n  order\n  ratio\n  text\n  calloutType: typeHandle\n  width\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment calloutBlock on contentBlocks_callout_BlockType {\n  id\n  typeHandle\n  callout {\n    ...CalloutMain\n    ... on callouts_calloutTwoTone_Entry {\n      backgroundColor\n      backgroundImage: cantoAssetSingle {\n        ...CantoAssetSingle\n      }\n      captionRichText\n      header\n      image: contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 800, height: 550)\n        }\n      }\n      links {\n        ...LinksFragment\n      }\n      text\n      calloutType: typeHandle\n    }\n    ... on callouts_calloutQuote_Entry {\n      calloutType: typeHandle\n      header\n      text\n      colorScheme\n      links {\n        ...LinksFragment\n      }\n      quote\n      attribution\n      imageQuote {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 492, height: 492)\n        }\n      }\n    }\n    ... on callouts_calloutNews_Entry {\n      calloutType: typeHandle\n      backgroundColor\n      id\n      entry: newsEntry {\n        ... on news_post_Entry {\n          title\n          url\n          date\n          dateCreated\n          description: teaser\n          pressReleaseId\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          entryType: postType {\n            title\n            slug\n          }\n          postType {\n            id\n            title\n            slug\n          }\n        }\n      }\n    }\n    ... on callouts_calloutEvent_Entry {\n      calloutType: typeHandle\n      backgroundColor\n      id\n      entry: eventEntry {\n        ... on events_events_Entry {\n          title\n          url\n          startDate\n          endDate: date\n          description\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          entryType: eventType {\n            title\n            slug\n          }\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment calloutBlock on contentBlocks_callout_BlockType {\n  id\n  typeHandle\n  callout {\n    ...CalloutMain\n    ... on callouts_calloutTwoTone_Entry {\n      backgroundColor\n      backgroundImage: cantoAssetSingle {\n        ...CantoAssetSingle\n      }\n      captionRichText\n      header\n      image: contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 800, height: 550)\n        }\n      }\n      links {\n        ...LinksFragment\n      }\n      text\n      calloutType: typeHandle\n    }\n    ... on callouts_calloutQuote_Entry {\n      calloutType: typeHandle\n      header\n      text\n      colorScheme\n      links {\n        ...LinksFragment\n      }\n      quote\n      attribution\n      imageQuote {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 492, height: 492)\n        }\n      }\n    }\n    ... on callouts_calloutNews_Entry {\n      calloutType: typeHandle\n      backgroundColor\n      id\n      entry: newsEntry {\n        ... on news_post_Entry {\n          title\n          url\n          date\n          dateCreated\n          description: teaser\n          pressReleaseId\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          entryType: postType {\n            title\n            slug\n          }\n          postType {\n            id\n            title\n            slug\n          }\n        }\n      }\n    }\n    ... on callouts_calloutEvent_Entry {\n      calloutType: typeHandle\n      backgroundColor\n      id\n      entry: eventEntry {\n        ... on events_events_Entry {\n          title\n          url\n          startDate\n          endDate: date\n          description\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 800, height: 550)\n            }\n          }\n          entryType: eventType {\n            title\n            slug\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment complexTableBlock on contentBlocks_complexTable_BlockType {\n  id\n  typeHandle\n  plainText\n  verticalAlignment\n  sites\n  complexTable {\n    ... on complexTable_BlockType {\n      tableRow {\n        ... on tableRow_tableCell_BlockType {\n          id\n          cellWidth\n          cellBackground\n          cellContent\n          hasFlexibleCellWidth\n        }\n      }\n    }\n  }\n}"
): (typeof documents)["fragment complexTableBlock on contentBlocks_complexTable_BlockType {\n  id\n  typeHandle\n  plainText\n  verticalAlignment\n  sites\n  complexTable {\n    ... on complexTable_BlockType {\n      tableRow {\n        ... on tableRow_tableCell_BlockType {\n          id\n          cellWidth\n          cellBackground\n          cellContent\n          hasFlexibleCellWidth\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment contactBlock on contentBlocks_contact_BlockType {\n  id\n  typeHandle\n  header\n  linkText\n  pageEntry {\n    id\n    uri\n    title\n  }\n}"
): (typeof documents)["fragment contactBlock on contentBlocks_contact_BlockType {\n  id\n  typeHandle\n  header\n  linkText\n  pageEntry {\n    id\n    uri\n    title\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment ContentBlocks on contentBlocks_NeoField {\n  ...accordionGroupBlock\n  ...calloutBlock\n  ...complexTableBlock\n  ...contactBlock\n  ...ctaGridBlock\n  ...imageGridBlock\n  ...imageBlock\n  ...investigationGridBlock\n  ...linkBlock\n  ...newsBlock\n  ...relatedContentBlock\n  ...scheduleBlock\n  ...shareBlock\n  ...simpleTableBlock\n  ...slideBlock\n  ...staffGridBlock\n  ...tableGroupBlock\n  ...textBlock\n  ...videoBlock\n  ...downloadListBlock\n  ...embedBlock\n  ...summitStatusBlock\n  ...publicationsListBlock\n  ...peopleBlock\n  ...keyNumbersBlock\n  ...skyviewerBlock\n  ...linkedImageListBlock\n  ...imageComparisonBlock\n  ...firstLookWidgetsBlock\n}"
): (typeof documents)["fragment ContentBlocks on contentBlocks_NeoField {\n  ...accordionGroupBlock\n  ...calloutBlock\n  ...complexTableBlock\n  ...contactBlock\n  ...ctaGridBlock\n  ...imageGridBlock\n  ...imageBlock\n  ...investigationGridBlock\n  ...linkBlock\n  ...newsBlock\n  ...relatedContentBlock\n  ...scheduleBlock\n  ...shareBlock\n  ...simpleTableBlock\n  ...slideBlock\n  ...staffGridBlock\n  ...tableGroupBlock\n  ...textBlock\n  ...videoBlock\n  ...downloadListBlock\n  ...embedBlock\n  ...summitStatusBlock\n  ...publicationsListBlock\n  ...peopleBlock\n  ...keyNumbersBlock\n  ...skyviewerBlock\n  ...linkedImageListBlock\n  ...imageComparisonBlock\n  ...firstLookWidgetsBlock\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment downloadListBlock on contentBlocks_downloadList_BlockType {\n  id\n  typeHandle\n  assetsList {\n    ... on assetsList_item_BlockType {\n      id\n      typeHandle\n      linkText\n      assetSingle {\n        id\n        kind\n        filename\n        url\n        size\n      }\n    }\n  }\n}"
): (typeof documents)["fragment downloadListBlock on contentBlocks_downloadList_BlockType {\n  id\n  typeHandle\n  assetsList {\n    ... on assetsList_item_BlockType {\n      id\n      typeHandle\n      linkText\n      assetSingle {\n        id\n        kind\n        filename\n        url\n        size\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment embedBlock on contentBlocks_iframe_BlockType {\n  id\n  typeHandle\n  embedTitle\n  fullWidth\n  embedCode\n  embedUrl: externalUrl\n}"
): (typeof documents)["fragment embedBlock on contentBlocks_iframe_BlockType {\n  id\n  typeHandle\n  embedTitle\n  fullWidth\n  embedCode\n  embedUrl: externalUrl\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
<<<<<<< HEAD
  source: "fragment firstLookWidgetsBlock on contentBlocks_firstLookWidgets_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  filmReel {\n    ... on filmReel_item_BlockType {\n      text\n      share\n    }\n  }\n  firstLookWidget\n}"
): (typeof documents)["fragment firstLookWidgetsBlock on contentBlocks_firstLookWidgets_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  filmReel {\n    ... on filmReel_item_BlockType {\n      text\n      share\n    }\n  }\n  firstLookWidget\n}"];
=======
  source: '\n  fragment relatedContentBlock on contentBlocks_NeoField {\n    ... on contentBlocks_relatedContent_BlockType {\n      id\n      header\n      mixedLink {\n        ...MixedLinkFragment\n      }\n      backgroundColor\n      numberOfItems\n      typeHandle\n      items: children {\n        ... on contentBlocks_relatedContentItem_BlockType {\n          entry: pagePostEntry {\n            ... on pages_pages_Entry {\n              id\n              title\n              uri\n              description\n              featuredImage: cantoAssetSingle {\n                ...CantoAssetMetadata\n              }\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n              image: hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n            }\n            ... on news_post_Entry {\n              id\n              title\n              uri\n              pressReleaseId\n              description: teaser\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n              image: hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n            }\n            ... on investigations_investigation_Entry {\n              id\n              title\n              uri\n              uri\n              status: investigationStatus\n              description: investigationDescription\n              cantoAssetSingle {\n                ...CantoAssetMetadata\n              }\n              landingPage {\n                uri\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  fragment relatedContentBlock on contentBlocks_NeoField {\n    ... on contentBlocks_relatedContent_BlockType {\n      id\n      header\n      mixedLink {\n        ...MixedLinkFragment\n      }\n      backgroundColor\n      numberOfItems\n      typeHandle\n      items: children {\n        ... on contentBlocks_relatedContentItem_BlockType {\n          entry: pagePostEntry {\n            ... on pages_pages_Entry {\n              id\n              title\n              uri\n              description\n              featuredImage: cantoAssetSingle {\n                ...CantoAssetMetadata\n              }\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n              image: hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n            }\n            ... on news_post_Entry {\n              id\n              title\n              uri\n              pressReleaseId\n              description: teaser\n              hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n              image: hero {\n                ... on heroes_Asset {\n                  altText\n                  width\n                  height\n                  url @transform(mode: "crop", width: 900, height: 550)\n                }\n              }\n            }\n            ... on investigations_investigation_Entry {\n              id\n              title\n              uri\n              uri\n              status: investigationStatus\n              description: investigationDescription\n              cantoAssetSingle {\n                ...CantoAssetMetadata\n              }\n              landingPage {\n                uri\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment shareBlock on contentBlocks_share_BlockType {\n    id\n    typeHandle\n    backgroundColor\n    shareTitle\n    shareVariant\n    text\n  }\n"
): (typeof documents)["\n  fragment shareBlock on contentBlocks_share_BlockType {\n    id\n    typeHandle\n    backgroundColor\n    shareTitle\n    shareVariant\n    text\n  }\n"];
>>>>>>> 319bfab7 (feat: featured images)
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment imageBlock on contentBlocks_image_BlockType {\n  id\n  typeHandle\n  caption\n  image: contentImage {\n    ... on contentImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "fit", width: 900)\n    }\n  }\n  cantoImage: cantoAssetSingle {\n    ...CantoAssetDetailed\n  }\n  floatDirection\n  backgroundColor\n  fullWidth\n}'
): (typeof documents)['fragment imageBlock on contentBlocks_image_BlockType {\n  id\n  typeHandle\n  caption\n  image: contentImage {\n    ... on contentImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "fit", width: 900)\n    }\n  }\n  cantoImage: cantoAssetSingle {\n    ...CantoAssetDetailed\n  }\n  floatDirection\n  backgroundColor\n  fullWidth\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment imageComparisonBlock on contentBlocks_imageComparison_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  caption: captionRichText\n  images: multipleCantoAssets {\n    ...CantoAssetMetadata\n  }\n}"
): (typeof documents)["fragment imageComparisonBlock on contentBlocks_imageComparison_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  caption: captionRichText\n  images: multipleCantoAssets {\n    ...CantoAssetMetadata\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment imageGridBlock on contentBlocks_imageGrid_BlockType {\n  typeHandle\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  items: children {\n    ... on contentBlocks_imageGridItem_BlockType {\n      id\n      header\n      contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 572, height: 316)\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment imageGridBlock on contentBlocks_imageGrid_BlockType {\n  typeHandle\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  items: children {\n    ... on contentBlocks_imageGridItem_BlockType {\n      id\n      header\n      contentImage {\n        ... on contentImages_Asset {\n          altText\n          width\n          height\n          url @transform(mode: "crop", width: 572, height: 316)\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment investigationGridBlock on contentBlocks_investigationGrid_BlockType {\n  typeHandle\n  id\n  header\n  items: children {\n    ... on contentBlocks_investigationCta_BlockType {\n      id\n      useExternalLink\n      investigation {\n        ... on investigations_investigation_Entry {\n          id\n          uri\n          title\n          externalUrl: externalUrlTranslatable\n          status: investigationStatus\n          cantoAssetSingle {\n            ...CantoAssetSingle\n          }\n          landingPage {\n            uri\n            title\n          }\n        }\n      }\n    }\n  }\n}"
): (typeof documents)["fragment investigationGridBlock on contentBlocks_investigationGrid_BlockType {\n  typeHandle\n  id\n  header\n  items: children {\n    ... on contentBlocks_investigationCta_BlockType {\n      id\n      useExternalLink\n      investigation {\n        ... on investigations_investigation_Entry {\n          id\n          uri\n          title\n          externalUrl: externalUrlTranslatable\n          status: investigationStatus\n          cantoAssetSingle {\n            ...CantoAssetSingle\n          }\n          landingPage {\n            uri\n            title\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment keyNumbersBlock on contentBlocks_keyNumbersGrid_BlockType {\n  id\n  typeHandle\n  header\n  backgroundColor\n  fullWidth\n  keyNumbers: children {\n    ... on contentBlocks_keyNumbersGridItem_BlockType {\n      header\n      footer\n      id\n      postscript\n      subheading\n    }\n  }\n  mixedLink {\n    ...MixedLinkFragment\n  }\n}"
): (typeof documents)["fragment keyNumbersBlock on contentBlocks_keyNumbersGrid_BlockType {\n  id\n  typeHandle\n  header\n  backgroundColor\n  fullWidth\n  keyNumbers: children {\n    ... on contentBlocks_keyNumbersGridItem_BlockType {\n      header\n      footer\n      id\n      postscript\n      subheading\n    }\n  }\n  mixedLink {\n    ...MixedLinkFragment\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment linkBlock on contentBlocks_link_BlockType {\n  id\n  typeHandle\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n}"
): (typeof documents)["fragment linkBlock on contentBlocks_link_BlockType {\n  id\n  typeHandle\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment linkedImageListBlock on contentBlocks_linkedImageList_BlockType {\n  id\n  typeHandle\n  description\n  header\n  variant: linkedImageListVariant\n  linkedImageList {\n    ... on linkedImageList_linkedImage_BlockType {\n      id\n      image {\n        ...CantoAssetMetadata\n      }\n      link: imageLink {\n        customText\n        target\n        text\n        title\n        type\n        url\n      }\n    }\n  }\n}"
): (typeof documents)["fragment linkedImageListBlock on contentBlocks_linkedImageList_BlockType {\n  id\n  typeHandle\n  description\n  header\n  variant: linkedImageListVariant\n  linkedImageList {\n    ... on linkedImageList_linkedImage_BlockType {\n      id\n      image {\n        ...CantoAssetMetadata\n      }\n      link: imageLink {\n        customText\n        target\n        text\n        title\n        type\n        url\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment newsBlock on contentBlocks_news_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  postType {\n    id\n    title\n    slug\n  }\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocks_newsItem_BlockType {\n      entry: newsEntry {\n        id\n        title\n        uri\n        ... on news_post_Entry {\n          description: teaser\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment newsBlock on contentBlocks_news_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  postType {\n    id\n    title\n    slug\n  }\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocks_newsItem_BlockType {\n      entry: newsEntry {\n        id\n        title\n        uri\n        ... on news_post_Entry {\n          description: teaser\n          hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment peopleBlock on contentBlocks_peopleBlock_BlockType {\n  id\n  typeHandle\n  peopleLayout\n  people {\n    ... on people_person_Entry {\n      id\n      name: title\n      personAffiliation\n      cantoAssetSingle {\n        ...CantoAssetSingle\n      }\n    }\n  }\n}"
): (typeof documents)["fragment peopleBlock on contentBlocks_peopleBlock_BlockType {\n  id\n  typeHandle\n  peopleLayout\n  people {\n    ... on people_person_Entry {\n      id\n      name: title\n      personAffiliation\n      cantoAssetSingle {\n        ...CantoAssetSingle\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment publicationsListBlock on contentBlocks_publicationsList_BlockType {\n  id\n  typeHandle\n  header\n  publications: publication {\n    ... on publications_publication_Entry {\n      id\n      title\n      authorPub\n      creditPub\n      date\n      externalUrl\n    }\n  }\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n}"
): (typeof documents)["fragment publicationsListBlock on contentBlocks_publicationsList_BlockType {\n  id\n  typeHandle\n  header\n  publications: publication {\n    ... on publications_publication_Entry {\n      id\n      title\n      authorPub\n      creditPub\n      date\n      externalUrl\n    }\n  }\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment relatedContentBlock on contentBlocks_NeoField {\n  ... on contentBlocks_relatedContent_BlockType {\n    id\n    header\n    mixedLink {\n      ...MixedLinkFragment\n    }\n    backgroundColor\n    numberOfItems\n    typeHandle\n    items: children {\n      ... on contentBlocks_relatedContentItem_BlockType {\n        entry: pagePostEntry {\n          ... on pages_pages_Entry {\n            id\n            title\n            uri\n            description\n            featuredImage: cantoAssetSingle {\n              ...CantoAssetMetadata\n            }\n            hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            image: hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n          }\n          ... on news_post_Entry {\n            id\n            title\n            uri\n            pressReleaseId\n            description: teaser\n            hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            image: hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n          }\n          ... on investigations_investigation_Entry {\n            id\n            title\n            uri\n            uri\n            status: investigationStatus\n            description: investigationDescription\n            cantoAssetSingle {\n              ...CantoAssetMetadata\n            }\n            landingPage {\n              uri\n            }\n          }\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment relatedContentBlock on contentBlocks_NeoField {\n  ... on contentBlocks_relatedContent_BlockType {\n    id\n    header\n    mixedLink {\n      ...MixedLinkFragment\n    }\n    backgroundColor\n    numberOfItems\n    typeHandle\n    items: children {\n      ... on contentBlocks_relatedContentItem_BlockType {\n        entry: pagePostEntry {\n          ... on pages_pages_Entry {\n            id\n            title\n            uri\n            description\n            featuredImage: cantoAssetSingle {\n              ...CantoAssetMetadata\n            }\n            hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            image: hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n          }\n          ... on news_post_Entry {\n            id\n            title\n            uri\n            pressReleaseId\n            description: teaser\n            hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            image: hero {\n              ... on heroes_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n          }\n          ... on investigations_investigation_Entry {\n            id\n            title\n            uri\n            uri\n            status: investigationStatus\n            description: investigationDescription\n            cantoAssetSingle {\n              ...CantoAssetMetadata\n            }\n            landingPage {\n              uri\n            }\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment scheduleBlock on contentBlocks_schedule_BlockType {\n  id\n  typeHandle\n  date\n  description\n  scheduleRows: children {\n    ... on contentBlocks_scheduleRow_BlockType {\n      startTime\n      endTime\n      description\n      bold\n    }\n  }\n}"
): (typeof documents)["fragment scheduleBlock on contentBlocks_schedule_BlockType {\n  id\n  typeHandle\n  date\n  description\n  scheduleRows: children {\n    ... on contentBlocks_scheduleRow_BlockType {\n      startTime\n      endTime\n      description\n      bold\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment shareBlock on contentBlocks_share_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  shareTitle\n  shareVariant\n  text\n}"
): (typeof documents)["fragment shareBlock on contentBlocks_share_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  shareTitle\n  shareVariant\n  text\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment simpleTableBlock on contentBlocks_simpleTable_BlockType {\n  id\n  typeHandle\n  sites\n  simpleTable {\n    ... on simpleTable_tableRow_BlockType {\n      id\n      rowTitle\n      rowContent\n      rowColor\n    }\n  }\n}"
): (typeof documents)["fragment simpleTableBlock on contentBlocks_simpleTable_BlockType {\n  id\n  typeHandle\n  sites\n  simpleTable {\n    ... on simpleTable_tableRow_BlockType {\n      id\n      rowTitle\n      rowContent\n      rowColor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment skyviewerBlock on contentBlocks_skyviewer_BlockType {\n  id\n  embedTitle\n  typeHandle\n  captionRichText\n  dec\n  fov\n  ra\n  fullWidth\n  backgroundColor\n}"
): (typeof documents)["fragment skyviewerBlock on contentBlocks_skyviewer_BlockType {\n  id\n  embedTitle\n  typeHandle\n  captionRichText\n  dec\n  fov\n  ra\n  fullWidth\n  backgroundColor\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment slideBlock on contentBlocks_slideBlock_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  numberOfItems\n  dynamicComponent\n  typeHandle\n  items: children {\n    ... on contentBlocks_slide_BlockType {\n      staffEntry {\n        id\n        title\n        uri\n        ... on staffProfiles_staffProfiles_Entry {\n          description: staffBio\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 400, height: 400)\n            }\n          }\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment slideBlock on contentBlocks_slideBlock_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  numberOfItems\n  dynamicComponent\n  typeHandle\n  items: children {\n    ... on contentBlocks_slide_BlockType {\n      staffEntry {\n        id\n        title\n        uri\n        ... on staffProfiles_staffProfiles_Entry {\n          description: staffBio\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 400, height: 400)\n            }\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment staffGridBlock on contentBlocks_staffGrid_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocks_staffGridItem_BlockType {\n      entry: staffEntry {\n        ... on staffProfiles_staffProfiles_Entry {\n          id\n          title\n          plainText\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 400, height: 400)\n            }\n          }\n          uri\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment staffGridBlock on contentBlocks_staffGrid_BlockType {\n  id\n  header\n  mixedLink {\n    customText\n    text\n    title\n    type\n    url\n    element {\n      uri\n    }\n  }\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocks_staffGridItem_BlockType {\n      entry: staffEntry {\n        ... on staffProfiles_staffProfiles_Entry {\n          id\n          title\n          plainText\n          image: staffPortrait {\n            ... on staffProfiles_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 400, height: 400)\n            }\n          }\n          uri\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment summitStatusBlock on contentBlocks_summitStatus_BlockType {\n  id\n  typeHandle\n  summitStatusLayout\n}"
): (typeof documents)["fragment summitStatusBlock on contentBlocks_summitStatus_BlockType {\n  id\n  typeHandle\n  summitStatusLayout\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment tableGroupBlock on contentBlocks_tableGroup_BlockType {\n  id\n  typeHandle\n  sites\n  items: children {\n    ...complexTableBlock\n  }\n}"
): (typeof documents)["fragment tableGroupBlock on contentBlocks_tableGroup_BlockType {\n  id\n  typeHandle\n  sites\n  items: children {\n    ...complexTableBlock\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment textBlock on contentBlocks_text_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  text\n}"
): (typeof documents)["fragment textBlock on contentBlocks_text_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  text\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment videoBlock on contentBlocks_video_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  caption\n  url: externalUrlTranslatable\n  cantoAsset: videoType\n  fullscreenVideo\n  fullWidth\n  cantoAssets: responsiveAssets {\n    ... on responsiveAssets_asset_BlockType {\n      orientation\n      asset(where: {key: "scheme", value: "video"}) {\n        ...CantoAssetMetadata\n        default {\n          DateUploaded\n        }\n        metadata {\n          MIMEType\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment videoBlock on contentBlocks_video_BlockType {\n  id\n  typeHandle\n  backgroundColor\n  caption\n  url: externalUrlTranslatable\n  cantoAsset: videoType\n  fullscreenVideo\n  fullWidth\n  cantoAssets: responsiveAssets {\n    ... on responsiveAssets_asset_BlockType {\n      orientation\n      asset(where: {key: "scheme", value: "video"}) {\n        ...CantoAssetMetadata\n        default {\n          DateUploaded\n        }\n        metadata {\n          MIMEType\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getEducatorPageEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on pages_educatorPages_Entry {\n        level\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        overlapHero\n        hideTitle\n        pageType\n        dynamicComponent\n        image: hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 900, height: 550)\n          }\n        }\n        ancestors {\n          ... on pages_pages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_educatorPages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_investigationLandingPage_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_redirectPage_Entry {\n            id\n            uri\n            title\n          }\n        }\n        parent {\n          id\n          uri\n          title\n          children {\n            ... on pages_pages_Entry {\n              uri\n              title\n            }\n            ... on pages_educatorPages_Entry {\n              uri\n              title\n            }\n            ... on pages_investigationLandingPage_Entry {\n              uri\n              title\n            }\n            ... on pages_redirectPage_Entry {\n              uri\n              title\n            }\n          }\n        }\n        showGuideNav: showSiblingNav\n        subHeroText\n        subHeroHeader: plainText\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getEducatorPageEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on pages_educatorPages_Entry {\n        level\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        overlapHero\n        hideTitle\n        pageType\n        dynamicComponent\n        image: hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 900, height: 550)\n          }\n        }\n        ancestors {\n          ... on pages_pages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_educatorPages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_investigationLandingPage_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_redirectPage_Entry {\n            id\n            uri\n            title\n          }\n        }\n        parent {\n          id\n          uri\n          title\n          children {\n            ... on pages_pages_Entry {\n              uri\n              title\n            }\n            ... on pages_educatorPages_Entry {\n              uri\n              title\n            }\n            ... on pages_investigationLandingPage_Entry {\n              uri\n              title\n            }\n            ... on pages_redirectPage_Entry {\n              uri\n              title\n            }\n          }\n        }\n        showGuideNav: showSiblingNav\n        subHeroText\n        subHeroHeader: plainText\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getEventEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on events_events_Entry {\n        address\n        city\n        state\n        country\n        timezone\n        registrationOpenDate\n        registrationCloseDate\n        startDate\n        startTime: eventStartTime\n        endDate: date\n        endTime: eventEndTime\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        eventType {\n          id\n          title\n          slug\n        }\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getEventEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on events_events_Entry {\n        address\n        city\n        state\n        country\n        timezone\n        registrationOpenDate\n        registrationCloseDate\n        startDate\n        startTime: eventStartTime\n        endDate: date\n        endTime: eventEndTime\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        eventType {\n          id\n          title\n          slug\n        }\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment contactBlockNews on contentBlocksNews_contactStaff_BlockType {\n  id\n  typeHandle\n  header\n  staffEntry {\n    title\n    ... on staffProfiles_staffProfiles_Entry {\n      email\n      phoneNumber {\n        number\n      }\n      plainText\n      subLocation {\n        ... on location_Category {\n          address\n          city\n          country\n          state\n          title\n        }\n      }\n    }\n  }\n}"
): (typeof documents)["fragment contactBlockNews on contentBlocksNews_contactStaff_BlockType {\n  id\n  typeHandle\n  header\n  staffEntry {\n    title\n    ... on staffProfiles_staffProfiles_Entry {\n      email\n      phoneNumber {\n        number\n      }\n      plainText\n      subLocation {\n        ... on location_Category {\n          address\n          city\n          country\n          state\n          title\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment ContentBlocksNews on contentBlocksNews_NeoField {\n  ...textBlockNews\n  ...imageBlockNews\n  ...linkBlockNews\n  ...contactBlockNews\n  ...relatedContentBlockNews\n  ...videoBlockNews\n  ...skyviewerNewsBlock\n}"
): (typeof documents)["fragment ContentBlocksNews on contentBlocksNews_NeoField {\n  ...textBlockNews\n  ...imageBlockNews\n  ...linkBlockNews\n  ...contactBlockNews\n  ...relatedContentBlockNews\n  ...videoBlockNews\n  ...skyviewerNewsBlock\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment imageBlockNews on contentBlocksNews_image_BlockType {\n  id\n  typeHandle\n  caption\n  image: contentImage {\n    ... on contentImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "fit", width: 900)\n    }\n  }\n  cantoImage: cantoAssetSingle {\n    ...CantoAssetDetailed\n  }\n  floatDirection\n}'
): (typeof documents)['fragment imageBlockNews on contentBlocksNews_image_BlockType {\n  id\n  typeHandle\n  caption\n  image: contentImage {\n    ... on contentImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "fit", width: 900)\n    }\n  }\n  cantoImage: cantoAssetSingle {\n    ...CantoAssetDetailed\n  }\n  floatDirection\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment linkBlockNews on contentBlocksNews_linkedAsset_BlockType {\n  id\n  typeHandle\n  url: externalUrl\n  text: header\n}"
): (typeof documents)["fragment linkBlockNews on contentBlocksNews_linkedAsset_BlockType {\n  id\n  typeHandle\n  url: externalUrl\n  text: header\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment relatedContentBlockNews on contentBlocksNews_relatedContent_BlockType {\n  id\n  header\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocksNews_relatedContentItem_BlockType {\n      entry: pagePostEntry {\n        id\n        title\n        uri\n        ... on pages_pages_Entry {\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n        ... on news_post_Entry {\n          date\n          description: teaser\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n      }\n    }\n  }\n}'
): (typeof documents)['fragment relatedContentBlockNews on contentBlocksNews_relatedContent_BlockType {\n  id\n  header\n  numberOfItems\n  typeHandle\n  items: children {\n    ... on contentBlocksNews_relatedContentItem_BlockType {\n      entry: pagePostEntry {\n        id\n        title\n        uri\n        ... on pages_pages_Entry {\n          description\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n        ... on news_post_Entry {\n          date\n          description: teaser\n          image: hero {\n            ... on heroes_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "crop", width: 900, height: 550)\n            }\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment skyviewerNewsBlock on contentBlocksNews_skyviewer_BlockType {\n  id\n  embedTitle\n  typeHandle\n  captionRichText\n  dec\n  fov\n  ra\n  fullWidth\n  backgroundColor\n}"
): (typeof documents)["fragment skyviewerNewsBlock on contentBlocksNews_skyviewer_BlockType {\n  id\n  embedTitle\n  typeHandle\n  captionRichText\n  dec\n  fov\n  ra\n  fullWidth\n  backgroundColor\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment textBlockNews on contentBlocksNews_text_BlockType {\n  typeHandle\n  id\n  text\n}"
): (typeof documents)["fragment textBlockNews on contentBlocksNews_text_BlockType {\n  typeHandle\n  id\n  text\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment videoBlockNews on contentBlocksNews_video_BlockType {\n  id\n  typeHandle\n  caption\n  url: externalUrlTranslatable\n}"
): (typeof documents)["fragment videoBlockNews on contentBlocksNews_video_BlockType {\n  id\n  typeHandle\n  caption\n  url: externalUrlTranslatable\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getNewsEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on news_post_Entry {\n        date\n        dateCreated\n        dateUpdated\n        description: teaser\n        pressReleaseId\n        siteHandle\n        postType {\n          id\n          title\n          slug\n        }\n        postTags {\n          ... on newsTags_Tag {\n            slug\n            title\n          }\n        }\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        heroCaption: captionRichText\n        newsAssets: sidebarAssets {\n          ... on sidebarAssets_header_BlockType {\n            assetHeader\n          }\n          ... on sidebarAssets_textLink_BlockType {\n            text\n            textLink {\n              url\n            }\n          }\n          ... on sidebarAssets_externalLink_BlockType {\n            text\n            externalLink\n          }\n          ... on sidebarAssets_image_BlockType {\n            image {\n              ... on contentImages_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            caption\n          }\n          ... on sidebarAssets_associatedAsset_BlockType {\n            asset {\n              metadata: additional {\n                AltTextEN\n                AltTextES\n                CaptionEN\n                CaptionES\n                Credit\n                TitleEN\n                TitleES\n              }\n              id\n              width\n              height\n              url {\n                directUrlOriginal\n                directUrlPreview\n                directUrlPreviewPlay\n              }\n            }\n          }\n        }\n        contentBlocksNews {\n          ...ContentBlocksNews\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getNewsEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on news_post_Entry {\n        date\n        dateCreated\n        dateUpdated\n        description: teaser\n        pressReleaseId\n        siteHandle\n        postType {\n          id\n          title\n          slug\n        }\n        postTags {\n          ... on newsTags_Tag {\n            slug\n            title\n          }\n        }\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        heroCaption: captionRichText\n        newsAssets: sidebarAssets {\n          ... on sidebarAssets_header_BlockType {\n            assetHeader\n          }\n          ... on sidebarAssets_textLink_BlockType {\n            text\n            textLink {\n              url\n            }\n          }\n          ... on sidebarAssets_externalLink_BlockType {\n            text\n            externalLink\n          }\n          ... on sidebarAssets_image_BlockType {\n            image {\n              ... on contentImages_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            caption\n          }\n          ... on sidebarAssets_associatedAsset_BlockType {\n            asset {\n              metadata: additional {\n                AltTextEN\n                AltTextES\n                CaptionEN\n                CaptionES\n                Credit\n                TitleEN\n                TitleES\n              }\n              id\n              width\n              height\n              url {\n                directUrlOriginal\n                directUrlPreview\n                directUrlPreviewPlay\n              }\n            }\n          }\n        }\n        contentBlocksNews {\n          ...ContentBlocksNews\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PagePreview on pages_pages_Entry {\n    id\n    uri\n    title\n    language\n    typeHandle\n    featuredImage: cantoAssetSingle {\n      ...CantoAssetMetadata\n    }\n    localized {\n      uri\n      language\n    }\n    date: dateUpdated\n    description\n    image: hero {\n      ... on heroes_Asset {\n        altText\n        width\n        height\n        url @transform(mode: "crop", width: 900, height: 550)\n      }\n    }\n    sidebarAssets {\n      ... on sidebarAssets_textLink_BlockType {\n        text\n        textLink {\n          url\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  fragment PagePreview on pages_pages_Entry {\n    id\n    uri\n    title\n    language\n    typeHandle\n    featuredImage: cantoAssetSingle {\n      ...CantoAssetMetadata\n    }\n    localized {\n      uri\n      language\n    }\n    date: dateUpdated\n    description\n    image: hero {\n      ... on heroes_Asset {\n        altText\n        width\n        height\n        url @transform(mode: "crop", width: 900, height: 550)\n      }\n    }\n    sidebarAssets {\n      ... on sidebarAssets_textLink_BlockType {\n        text\n        textLink {\n          url\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getPageEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on pages_pages_Entry {\n        level\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        overlapHero\n        hideTitle\n        pageType\n        typeHandle\n        dynamicComponent\n        eventFilter: eventType {\n          id\n        }\n        showSidebar\n        sidebarAssets {\n          ... on sidebarAssets_header_BlockType {\n            assetHeader\n          }\n          ... on sidebarAssets_textLink_BlockType {\n            text\n            textLink {\n              url\n            }\n          }\n          ... on sidebarAssets_externalLink_BlockType {\n            text\n            externalLink\n          }\n          ... on sidebarAssets_image_BlockType {\n            image {\n              ... on contentImages_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            caption\n          }\n        }\n        ancestors {\n          ... on pages_pages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_educatorPages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_investigationLandingPage_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_redirectPage_Entry {\n            id\n            uri\n            title\n          }\n        }\n        parent {\n          id\n          uri\n          title\n          children {\n            ... on pages_pages_Entry {\n              uri\n              title\n            }\n            ... on pages_educatorPages_Entry {\n              uri\n              title\n            }\n            ... on pages_investigationLandingPage_Entry {\n              uri\n              title\n            }\n            ... on pages_redirectPage_Entry {\n              uri\n              title\n            }\n          }\n        }\n        showGuideNav: showSiblingNav\n        subHeroText\n        subHeroHeader: plainText\n        subHeroColorScheme: colorScheme\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getPageEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on pages_pages_Entry {\n        level\n        description\n        hero {\n          ... on heroes_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        focalPointX\n        focalPointY\n        overlapHero\n        hideTitle\n        pageType\n        typeHandle\n        dynamicComponent\n        eventFilter: eventType {\n          id\n        }\n        showSidebar\n        sidebarAssets {\n          ... on sidebarAssets_header_BlockType {\n            assetHeader\n          }\n          ... on sidebarAssets_textLink_BlockType {\n            text\n            textLink {\n              url\n            }\n          }\n          ... on sidebarAssets_externalLink_BlockType {\n            text\n            externalLink\n          }\n          ... on sidebarAssets_image_BlockType {\n            image {\n              ... on contentImages_Asset {\n                altText\n                width\n                height\n                url @transform(mode: "crop", width: 900, height: 550)\n              }\n            }\n            caption\n          }\n        }\n        ancestors {\n          ... on pages_pages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_educatorPages_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_investigationLandingPage_Entry {\n            id\n            uri\n            title\n          }\n          ... on pages_redirectPage_Entry {\n            id\n            uri\n            title\n          }\n        }\n        parent {\n          id\n          uri\n          title\n          children {\n            ... on pages_pages_Entry {\n              uri\n              title\n            }\n            ... on pages_educatorPages_Entry {\n              uri\n              title\n            }\n            ... on pages_investigationLandingPage_Entry {\n              uri\n              title\n            }\n            ... on pages_redirectPage_Entry {\n              uri\n              title\n            }\n          }\n        }\n        showGuideNav: showSiblingNav\n        subHeroText\n        subHeroHeader: plainText\n        subHeroColorScheme: colorScheme\n        contentBlocks {\n          ...ContentBlocks\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query getStaffProfileEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on staffProfiles_staffProfiles_Entry {\n        bio: staffBio\n        heroImage: staffPortrait {\n          ... on staffProfiles_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        quote: pullQuote\n        tags: staffTags {\n          ... on staffTags_Tag {\n            id\n            slug\n            title\n          }\n        }\n        tradingCard: staffTradingCard {\n          ... on staffProfiles_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "fit", width: 540)\n          }\n        }\n        contentBlocks: contentBlocksNews {\n          ...ContentBlocksNews\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query getStaffProfileEntry(\n    $section: [String]\n    $type: [String]\n    $site: [String]\n    $uri: [String]\n  ) {\n    entry(section: $section, type: $type, site: $site, uri: $uri) {\n      ...BaseFields\n      ... on staffProfiles_staffProfiles_Entry {\n        bio: staffBio\n        heroImage: staffPortrait {\n          ... on staffProfiles_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "crop", width: 1920, height: 1067)\n          }\n        }\n        quote: pullQuote\n        tags: staffTags {\n          ... on staffTags_Tag {\n            id\n            slug\n            title\n          }\n        }\n        tradingCard: staffTradingCard {\n          ... on staffProfiles_Asset {\n            altText\n            width\n            height\n            url @transform(mode: "fit", width: 540)\n          }\n        }\n        contentBlocks: contentBlocksNews {\n          ...ContentBlocksNews\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment BaseFields on EntryInterface {\n  id\n  uri\n  title\n  language\n  typeHandle\n  localized {\n    uri\n    language\n  }\n}"
): (typeof documents)["fragment BaseFields on EntryInterface {\n  id\n  uri\n  title\n  language\n  typeHandle\n  localized {\n    uri\n    language\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment PagePreview on pages_pages_Entry {\n    id\n    uri\n    title\n    language\n    typeHandle\n    featuredImage: cantoAssetSingle {\n      ...CantoAssetMetadata\n    }\n    localized {\n      uri\n      language\n    }\n    date: dateUpdated\n    description\n    image: hero {\n      ... on heroes_Asset {\n        altText\n        width\n        height\n        url @transform(mode: "crop", width: 900, height: 550)\n      }\n    }\n    sidebarAssets {\n      ... on sidebarAssets_textLink_BlockType {\n        text\n        textLink {\n          url\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  fragment PagePreview on pages_pages_Entry {\n    id\n    uri\n    title\n    language\n    typeHandle\n    featuredImage: cantoAssetSingle {\n      ...CantoAssetMetadata\n    }\n    localized {\n      uri\n      language\n    }\n    date: dateUpdated\n    description\n    image: hero {\n      ... on heroes_Asset {\n        altText\n        width\n        height\n        url @transform(mode: "crop", width: 900, height: 550)\n      }\n    }\n    sidebarAssets {\n      ... on sidebarAssets_textLink_BlockType {\n        text\n        textLink {\n          url\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment CantoAssetDetailed on CantoDamAssetInterface {\n  additional {\n    AltTextEN\n    AltTextES\n    CaptionEN\n    CaptionES\n    Credit\n    TitleEN\n    TitleES\n  }\n  default {\n    ContentType\n    DateCreated\n    DateModified\n    DateUploaded\n    Size\n  }\n  approvalStatus\n  height\n  id\n  keyword\n  name\n  owner\n  ownerName\n  scheme\n  size\n  smartTags\n  tag\n  time\n  url {\n    directUrlOriginal\n    directUrlPreview\n    directUrlPreviewPlay\n    download\n    metadata\n    preview\n    PNG\n    HighJPG\n  }\n  width\n}"
): (typeof documents)["fragment CantoAssetDetailed on CantoDamAssetInterface {\n  additional {\n    AltTextEN\n    AltTextES\n    CaptionEN\n    CaptionES\n    Credit\n    TitleEN\n    TitleES\n  }\n  default {\n    ContentType\n    DateCreated\n    DateModified\n    DateUploaded\n    Size\n  }\n  approvalStatus\n  height\n  id\n  keyword\n  name\n  owner\n  ownerName\n  scheme\n  size\n  smartTags\n  tag\n  time\n  url {\n    directUrlOriginal\n    directUrlPreview\n    directUrlPreviewPlay\n    download\n    metadata\n    preview\n    PNG\n    HighJPG\n  }\n  width\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment CantoAssetMetadata on CantoDamAssetInterface {\n  additional {\n    AltTextEN\n    AltTextES\n    TitleEN\n    TitleES\n    CaptionEN\n    CaptionES\n    Credit\n  }\n  height\n  id\n  name\n  scheme\n  url {\n    directUrlOriginal\n    directUrlPreview\n    directUrlPreviewPlay\n  }\n  width\n}"
): (typeof documents)["fragment CantoAssetMetadata on CantoDamAssetInterface {\n  additional {\n    AltTextEN\n    AltTextES\n    TitleEN\n    TitleES\n    CaptionEN\n    CaptionES\n    Credit\n  }\n  height\n  id\n  name\n  scheme\n  url {\n    directUrlOriginal\n    directUrlPreview\n    directUrlPreviewPlay\n  }\n  width\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment CantoAssetSingle on CantoDamAssetInterface {\n  url {\n    directUrlPreview\n    directUrlOriginal\n    PNG\n    HighJPG\n    LowJPG\n    preview\n  }\n  width\n  height\n  metadata: additional {\n    AltTextEN\n    AltTextES\n    CaptionEN\n    CaptionES\n    Credit\n  }\n  fileInfo: metadata {\n    fileType: FileTypeExtension\n  }\n}"
): (typeof documents)["fragment CantoAssetSingle on CantoDamAssetInterface {\n  url {\n    directUrlPreview\n    directUrlOriginal\n    PNG\n    HighJPG\n    LowJPG\n    preview\n  }\n  width\n  height\n  metadata: additional {\n    AltTextEN\n    AltTextES\n    CaptionEN\n    CaptionES\n    Credit\n  }\n  fileInfo: metadata {\n    fileType: FileTypeExtension\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment CategoriesFragment on CategoryInterface {\n  id\n  slug\n  groupHandle\n  title\n}"
): (typeof documents)["fragment CategoriesFragment on CategoryInterface {\n  id\n  slug\n  groupHandle\n  title\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment LinksFragment on links_link_BlockType {\n  mixedLink {\n    ... on linkField_Link {\n      customText\n      text\n      title\n      type\n      url\n      element {\n        uri\n      }\n    }\n  }\n}"
): (typeof documents)["fragment LinksFragment on links_link_BlockType {\n  mixedLink {\n    ... on linkField_Link {\n      customText\n      text\n      title\n      type\n      url\n      element {\n        uri\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "fragment MixedLinkFragment on linkField_Link {\n  customText\n  text\n  title\n  type\n  url\n  element {\n    uri\n  }\n}"
): (typeof documents)["fragment MixedLinkFragment on linkField_Link {\n  customText\n  text\n  title\n  type\n  url\n  element {\n    uri\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'fragment SiteInfoFragment on siteInfo_GlobalSet {\n  language\n  name\n  handle\n  siteTitle\n  siteDescription\n  siteImage {\n    ... on generalImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "crop", width: 800)\n    }\n  }\n  contactInfo {\n    ... on contactInfo_mail_BlockType {\n      id\n      text\n      typeHandle\n    }\n    ... on contactInfo_phone_BlockType {\n      id\n      text\n      typeHandle\n    }\n  }\n}'
): (typeof documents)['fragment SiteInfoFragment on siteInfo_GlobalSet {\n  language\n  name\n  handle\n  siteTitle\n  siteDescription\n  siteImage {\n    ... on generalImages_Asset {\n      altText\n      width\n      height\n      url @transform(mode: "crop", width: 800)\n    }\n  }\n  contactInfo {\n    ... on contactInfo_mail_BlockType {\n      id\n      text\n      typeHandle\n    }\n    ... on contactInfo_phone_BlockType {\n      id\n      text\n      typeHandle\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getContactForm($set: [String], $site: [String]) {\n      contactForm: globalSet(handle: $set, site: $site) {\n        ... on contactForm_GlobalSet {\n          contactFormTopics {\n            ... on contactFormTopics_topic_BlockType {\n              id\n              value: topicValue\n              label: topicLabel\n            }\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query getContactForm($set: [String], $site: [String]) {\n      contactForm: globalSet(handle: $set, site: $site) {\n        ... on contactForm_GlobalSet {\n          contactFormTopics {\n            ... on contactFormTopics_topic_BlockType {\n              id\n              value: topicValue\n              label: topicLabel\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query getFooter($set: [String], $site: [String]) {\n      footer: globalSet(handle: $set, site: $site) {\n        ... on footer_GlobalSet {\n          id\n          name\n          handle\n          links {\n            ...LinksFragment\n          }\n          colophon\n          supportersLogos {\n            ... on generalImages_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "fit", width: 1000)\n            }\n          }\n          supportersLogosAlt\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query getFooter($set: [String], $site: [String]) {\n      footer: globalSet(handle: $set, site: $site) {\n        ... on footer_GlobalSet {\n          id\n          name\n          handle\n          links {\n            ...LinksFragment\n          }\n          colophon\n          supportersLogos {\n            ... on generalImages_Asset {\n              altText\n              width\n              height\n              url @transform(mode: "fit", width: 1000)\n            }\n          }\n          supportersLogosAlt\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getLogos($set: [String], $site: [String]) {\n      siteInfo: globalSet(handle: $set, site: $site) {\n        ... on siteInfo_GlobalSet {\n          __typename\n          logoLarge {\n            url {\n              directUrlOriginal\n            }\n            width\n            height\n          }\n          logoSmall {\n            url {\n              directUrlOriginal\n            }\n            width\n            height\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query getLogos($set: [String], $site: [String]) {\n      siteInfo: globalSet(handle: $set, site: $site) {\n        ... on siteInfo_GlobalSet {\n          __typename\n          logoLarge {\n            url {\n              directUrlOriginal\n            }\n            width\n            height\n          }\n          logoSmall {\n            url {\n              directUrlOriginal\n            }\n            width\n            height\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment rootPageInfoFragment on rootPageInformation_GlobalSet {\n    name\n    handle\n    customBreadcrumbs {\n      ... on customBreadcrumbs_ancestorsAndRoot_BlockType {\n        header\n        pageEntry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  }\n"
): (typeof documents)["\n  fragment rootPageInfoFragment on rootPageInformation_GlobalSet {\n    name\n    handle\n    customBreadcrumbs {\n      ... on customBreadcrumbs_ancestorsAndRoot_BlockType {\n        header\n        pageEntry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getRootPages($site: [String], $set: [String]) {\n      rootPages: globalSet(handle: $set, site: $site) {\n        ...rootPageInfoFragment\n      }\n    }\n  "
): (typeof documents)["\n    query getRootPages($site: [String], $set: [String]) {\n      rootPages: globalSet(handle: $set, site: $site) {\n        ...rootPageInfoFragment\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query getSocials($set: [String], $site: [String]) {\n      socials: globalSet(handle: $set, site: $site) {\n        ... on siteInfo_GlobalSet {\n          email\n          facebook\n          instagram\n          linkedIn\n          twitter\n          youTube\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query getSocials($set: [String], $site: [String]) {\n      socials: globalSet(handle: $set, site: $site) {\n        ... on siteInfo_GlobalSet {\n          email\n          facebook\n          instagram\n          linkedIn\n          twitter\n          youTube\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query RelatedInvestigation($site: [String], $ids: [QueryArgument]) {\n      investigation: entry(\n        type: "investigation"\n        landingPage: $ids\n        site: $site\n      ) {\n        sectionHandle\n        ... on investigations_investigation_Entry {\n          uri\n          title\n          duration: plainText\n          typeHandle\n          externalUrl: externalUrlTranslatable\n          status: investigationStatus\n          landingPage {\n            ... on pages_investigationLandingPage_Entry {\n              id\n              uri\n              title\n            }\n          }\n          cantoAssetSingle {\n            ...CantoAssetMetadata\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query RelatedInvestigation($site: [String], $ids: [QueryArgument]) {\n      investigation: entry(\n        type: "investigation"\n        landingPage: $ids\n        site: $site\n      ) {\n        sectionHandle\n        ... on investigations_investigation_Entry {\n          uri\n          title\n          duration: plainText\n          typeHandle\n          externalUrl: externalUrlTranslatable\n          status: investigationStatus\n          landingPage {\n            ... on pages_investigationLandingPage_Entry {\n              id\n              uri\n              title\n            }\n          }\n          cantoAssetSingle {\n            ...CantoAssetMetadata\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GetSiblings(\n      $uri: [String]\n      $site: [String]\n      $parentId: Int\n      $level: Int\n    ) {\n      siblings: entry(uri: $uri, site: $site) {\n        prev(\n          descendantOf: $parentId\n          section: "pages"\n          site: $site\n          level: $level\n        ) {\n          uri\n          title\n        }\n        next(\n          descendantOf: $parentId\n          section: "pages"\n          site: $site\n          level: $level\n        ) {\n          uri\n          title\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GetSiblings(\n      $uri: [String]\n      $site: [String]\n      $parentId: Int\n      $level: Int\n    ) {\n      siblings: entry(uri: $uri, site: $site) {\n        prev(\n          descendantOf: $parentId\n          section: "pages"\n          site: $site\n          level: $level\n        ) {\n          uri\n          title\n        }\n        next(\n          descendantOf: $parentId\n          section: "pages"\n          site: $site\n          level: $level\n        ) {\n          uri\n          title\n        }\n      }\n    }\n  '];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
