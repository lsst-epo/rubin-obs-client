/* eslint-disable */
import * as types from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
  '\n    query RecentAssetsQuery(\n      $site: [String]\n      $uri: [String]\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(whereIn: { key: "scheme", values: $scheme }) {\n            id\n          }\n        }\n      }\n    }\n  ':
    types.RecentAssetsQueryDocument,
  '\n    query GalleryTitleQuery(\n      $site: [String]\n      $uri: [String]\n      $id: String\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          assetAlbum(\n            whereIn: { key: "scheme", values: $scheme }\n            where: { key: "id", value: $id }\n          ) {\n            additional {\n              TitleEN\n              TitleES\n            }\n            id\n            name\n          }\n        }\n      }\n    }\n  ':
    types.GalleryTitleQueryDocument,
  '\n    query GalleryImageQuery($site: [String], $uri: [String], $id: String) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(where: { key: "id", value: $id }) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  ':
    types.GalleryImageQueryDocument,
  '\n    query RandomAssetQuery($site: [String], $scheme: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          slug\n          assetAlbum(\n            random: 1\n            whereNotIn: { key: "scheme", values: $scheme }\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  ':
    types.RandomAssetQueryDocument,
  '\n    query MainGalleryQuery($site: [String]) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          isVisible\n          galleryEntry {\n            ... on galleries_gallery_Entry {\n              __typename\n              slug\n            }\n          }\n          slideshowEntry {\n            ... on slideshows_slideshow_Entry {\n              id\n              uri\n              title\n              richTextDescription\n            }\n          }\n        }\n      }\n    }\n  ':
    types.MainGalleryQueryDocument,
  "\n    query AllGalleriesQuery($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          slug\n        }\n      }\n    }\n  ":
    types.AllGalleriesQueryDocument,
  '\n    query GalleryMetadataQuery(\n      $site: [String]\n      $slug: [String]\n      $uri: [String]\n    ) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          galleryEntry(slug: $slug) {\n            ... on galleries_gallery_Entry {\n              id\n            }\n          }\n        }\n      }\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          slug\n          title\n          description\n          cantoAssetSingle {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n          assetAlbum(first: true) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n    }\n  ':
    types.GalleryMetadataQueryDocument,
  "\n    query GalleryQuery(\n      $site: [String]\n      $uri: [String]\n      $whereIn: WhereInFiltersInput\n      $whereNotIn: WhereNotInFiltersInput\n      $whereContainsIn: WhereContainsInFilterInput\n      $forPage: ForPageInput\n    ) {\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          description\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            forPage: $forPage\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n      metaGalleries: galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            id\n          }\n        }\n      }\n    }\n  ":
    types.GalleryQueryDocument,
  '\n    query getNavigationItems($site: [String]) {\n      navigationItems: entries(\n        section: ["pages", "galleries"]\n        site: $site\n        level: 1\n        isVisible: true\n      ) {\n        id\n        title\n        uri\n        children(isVisible: true) {\n          id\n          title\n          uri\n          children(isVisible: true) {\n            id\n            title\n            uri\n          }\n        }\n      }\n      galleriesEntries(isVisible: true) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  ':
    types.GetNavigationItemsDocument,
  "\n    query SearchResultsPage($site: [String]) {\n      searchResultsEntries(site: $site) {\n        ... on searchResults_searchResults_Entry {\n          title\n          id\n          dynamicComponent\n        }\n      }\n    }\n  ":
    types.SearchResultsPageDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query RecentAssetsQuery(\n      $site: [String]\n      $uri: [String]\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(whereIn: { key: "scheme", values: $scheme }) {\n            id\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query RecentAssetsQuery(\n      $site: [String]\n      $uri: [String]\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(whereIn: { key: "scheme", values: $scheme }) {\n            id\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryTitleQuery(\n      $site: [String]\n      $uri: [String]\n      $id: String\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          assetAlbum(\n            whereIn: { key: "scheme", values: $scheme }\n            where: { key: "id", value: $id }\n          ) {\n            additional {\n              TitleEN\n              TitleES\n            }\n            id\n            name\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryTitleQuery(\n      $site: [String]\n      $uri: [String]\n      $id: String\n      $scheme: [String]\n    ) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          assetAlbum(\n            whereIn: { key: "scheme", values: $scheme }\n            where: { key: "id", value: $id }\n          ) {\n            additional {\n              TitleEN\n              TitleES\n            }\n            id\n            name\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryImageQuery($site: [String], $uri: [String], $id: String) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(where: { key: "id", value: $id }) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryImageQuery($site: [String], $uri: [String], $id: String) {\n      galleriesEntries(uri: $uri, site: $site) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(where: { key: "id", value: $id }) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query RandomAssetQuery($site: [String], $scheme: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          slug\n          assetAlbum(\n            random: 1\n            whereNotIn: { key: "scheme", values: $scheme }\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query RandomAssetQuery($site: [String], $scheme: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          title\n          slug\n          assetAlbum(\n            random: 1\n            whereNotIn: { key: "scheme", values: $scheme }\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              CaptionEN\n              CaptionES\n              Credit\n              TitleEN\n              TitleES\n            }\n            default {\n              ContentType\n              DateCreated\n              DateModified\n              DateUploaded\n              Size\n            }\n            approvalStatus\n            height\n            id\n            name\n            owner\n            ownerName\n            scheme\n            size\n            smartTags\n            tag\n            time\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n              download\n              metadata\n              preview\n              PNG\n              HighJPG\n            }\n            width\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query MainGalleryQuery($site: [String]) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          isVisible\n          galleryEntry {\n            ... on galleries_gallery_Entry {\n              __typename\n              slug\n            }\n          }\n          slideshowEntry {\n            ... on slideshows_slideshow_Entry {\n              id\n              uri\n              title\n              richTextDescription\n            }\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query MainGalleryQuery($site: [String]) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          isVisible\n          galleryEntry {\n            ... on galleries_gallery_Entry {\n              __typename\n              slug\n            }\n          }\n          slideshowEntry {\n            ... on slideshows_slideshow_Entry {\n              id\n              uri\n              title\n              richTextDescription\n            }\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query AllGalleriesQuery($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          slug\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query AllGalleriesQuery($site: [String]) {\n      galleriesEntries(site: $site) {\n        ... on galleries_gallery_Entry {\n          slug\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query GalleryMetadataQuery(\n      $site: [String]\n      $slug: [String]\n      $uri: [String]\n    ) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          galleryEntry(slug: $slug) {\n            ... on galleries_gallery_Entry {\n              id\n            }\n          }\n        }\n      }\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          slug\n          title\n          description\n          cantoAssetSingle {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n          assetAlbum(first: true) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query GalleryMetadataQuery(\n      $site: [String]\n      $slug: [String]\n      $uri: [String]\n    ) {\n      pagesEntries(site: $site, uri: "gallery") {\n        ... on pages_galleryLandingPage_Entry {\n          __typename\n          galleryEntry(slug: $slug) {\n            ... on galleries_gallery_Entry {\n              id\n            }\n          }\n        }\n      }\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          slug\n          title\n          description\n          cantoAssetSingle {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n          assetAlbum(first: true) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query GalleryQuery(\n      $site: [String]\n      $uri: [String]\n      $whereIn: WhereInFiltersInput\n      $whereNotIn: WhereNotInFiltersInput\n      $whereContainsIn: WhereContainsInFilterInput\n      $forPage: ForPageInput\n    ) {\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          description\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            forPage: $forPage\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n      metaGalleries: galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            id\n          }\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query GalleryQuery(\n      $site: [String]\n      $uri: [String]\n      $whereIn: WhereInFiltersInput\n      $whereNotIn: WhereNotInFiltersInput\n      $whereContainsIn: WhereContainsInFilterInput\n      $forPage: ForPageInput\n    ) {\n      galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          description\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            forPage: $forPage\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            additional {\n              AltTextEN\n              AltTextES\n              TitleEN\n              TitleES\n            }\n            height\n            id\n            name\n            scheme\n            url {\n              directUrlOriginal\n              directUrlPreview\n              directUrlPreviewPlay\n            }\n            width\n          }\n        }\n      }\n      metaGalleries: galleriesEntries(site: $site, uri: $uri) {\n        ... on galleries_gallery_Entry {\n          assetAlbum(\n            whereNotIn: $whereNotIn\n            whereIn: $whereIn\n            whereContainsIn: $whereContainsIn\n          ) {\n            id\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query getNavigationItems($site: [String]) {\n      navigationItems: entries(\n        section: ["pages", "galleries"]\n        site: $site\n        level: 1\n        isVisible: true\n      ) {\n        id\n        title\n        uri\n        children(isVisible: true) {\n          id\n          title\n          uri\n          children(isVisible: true) {\n            id\n            title\n            uri\n          }\n        }\n      }\n      galleriesEntries(isVisible: true) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  '
): (typeof documents)['\n    query getNavigationItems($site: [String]) {\n      navigationItems: entries(\n        section: ["pages", "galleries"]\n        site: $site\n        level: 1\n        isVisible: true\n      ) {\n        id\n        title\n        uri\n        children(isVisible: true) {\n          id\n          title\n          uri\n          children(isVisible: true) {\n            id\n            title\n            uri\n          }\n        }\n      }\n      galleriesEntries(isVisible: true) {\n        ... on galleries_gallery_Entry {\n          id\n          title\n          uri\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n    query SearchResultsPage($site: [String]) {\n      searchResultsEntries(site: $site) {\n        ... on searchResults_searchResults_Entry {\n          title\n          id\n          dynamicComponent\n        }\n      }\n    }\n  "
): (typeof documents)["\n    query SearchResultsPage($site: [String]) {\n      searchResultsEntries(site: $site) {\n        ... on searchResults_searchResults_Entry {\n          title\n          id\n          dynamicComponent\n        }\n      }\n    }\n  "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
